
LAB_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002694  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  080027a0  080027a0  000127a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002958  08002958  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002958  08002958  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002958  08002958  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002958  08002958  00012958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800295c  0800295c  0001295c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  080029d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080029d0  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004a00  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001319  00000000  00000000  00024a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004a0  00000000  00000000  00025db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f8  00000000  00000000  00026258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d84  00000000  00000000  00026650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005273  00000000  00000000  0003d3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f1f4  00000000  00000000  00042647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c183b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019c4  00000000  00000000  000c1890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002788 	.word	0x08002788

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002788 	.word	0x08002788

0800014c <setNumberOnClock.5429>:
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  void setNumberOnClock(int number)
         {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	f8c7 c000 	str.w	ip, [r7]
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	3b01      	subs	r3, #1
 800015c:	2b0b      	cmp	r3, #11
 800015e:	d86b      	bhi.n	8000238 <setNumberOnClock.5429+0xec>
 8000160:	a201      	add	r2, pc, #4	; (adr r2, 8000168 <setNumberOnClock.5429+0x1c>)
 8000162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000166:	bf00      	nop
 8000168:	08000199 	.word	0x08000199
 800016c:	080001a5 	.word	0x080001a5
 8000170:	080001b1 	.word	0x080001b1
 8000174:	080001bd 	.word	0x080001bd
 8000178:	080001c9 	.word	0x080001c9
 800017c:	080001d7 	.word	0x080001d7
 8000180:	080001e5 	.word	0x080001e5
 8000184:	080001f3 	.word	0x080001f3
 8000188:	08000201 	.word	0x08000201
 800018c:	0800020f 	.word	0x0800020f
 8000190:	0800021d 	.word	0x0800021d
 8000194:	0800022b 	.word	0x0800022b

       	  switch(number)
       	  {
       	  case 1:
       		  HAL_GPIO_WritePin(Led_1_GPIO_Port, Led_1_Pin, RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	2110      	movs	r1, #16
 800019c:	4828      	ldr	r0, [pc, #160]	; (8000240 <setNumberOnClock.5429+0xf4>)
 800019e:	f000 fcf3 	bl	8000b88 <HAL_GPIO_WritePin>
       		  break;
 80001a2:	e049      	b.n	8000238 <setNumberOnClock.5429+0xec>
       	  case 2:
       		  HAL_GPIO_WritePin(Led_2_GPIO_Port, Led_2_Pin, RESET);
 80001a4:	2200      	movs	r2, #0
 80001a6:	2120      	movs	r1, #32
 80001a8:	4825      	ldr	r0, [pc, #148]	; (8000240 <setNumberOnClock.5429+0xf4>)
 80001aa:	f000 fced 	bl	8000b88 <HAL_GPIO_WritePin>
       		  break;
 80001ae:	e043      	b.n	8000238 <setNumberOnClock.5429+0xec>
       	  case 3:
       		  HAL_GPIO_WritePin(Led_3_GPIO_Port, Led_3_Pin, RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	2140      	movs	r1, #64	; 0x40
 80001b4:	4822      	ldr	r0, [pc, #136]	; (8000240 <setNumberOnClock.5429+0xf4>)
 80001b6:	f000 fce7 	bl	8000b88 <HAL_GPIO_WritePin>
       		  break;
 80001ba:	e03d      	b.n	8000238 <setNumberOnClock.5429+0xec>
       	  case 4:
       		  HAL_GPIO_WritePin(Led_4_GPIO_Port, Led_4_Pin, RESET);
 80001bc:	2200      	movs	r2, #0
 80001be:	2180      	movs	r1, #128	; 0x80
 80001c0:	481f      	ldr	r0, [pc, #124]	; (8000240 <setNumberOnClock.5429+0xf4>)
 80001c2:	f000 fce1 	bl	8000b88 <HAL_GPIO_WritePin>
       		  break;
 80001c6:	e037      	b.n	8000238 <setNumberOnClock.5429+0xec>
       	  case 5:
       		  HAL_GPIO_WritePin(Led_5_GPIO_Port, Led_5_Pin, RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ce:	481c      	ldr	r0, [pc, #112]	; (8000240 <setNumberOnClock.5429+0xf4>)
 80001d0:	f000 fcda 	bl	8000b88 <HAL_GPIO_WritePin>
       		  break;
 80001d4:	e030      	b.n	8000238 <setNumberOnClock.5429+0xec>
       	  case 6:
       		  HAL_GPIO_WritePin(Led_6_GPIO_Port, Led_6_Pin, RESET);
 80001d6:	2200      	movs	r2, #0
 80001d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001dc:	4818      	ldr	r0, [pc, #96]	; (8000240 <setNumberOnClock.5429+0xf4>)
 80001de:	f000 fcd3 	bl	8000b88 <HAL_GPIO_WritePin>
       		  break;
 80001e2:	e029      	b.n	8000238 <setNumberOnClock.5429+0xec>
       	  case 7:
       		  HAL_GPIO_WritePin(Led_7_GPIO_Port, Led_7_Pin, RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001ea:	4815      	ldr	r0, [pc, #84]	; (8000240 <setNumberOnClock.5429+0xf4>)
 80001ec:	f000 fccc 	bl	8000b88 <HAL_GPIO_WritePin>
       		  break;
 80001f0:	e022      	b.n	8000238 <setNumberOnClock.5429+0xec>
       	  case 8:
       		  HAL_GPIO_WritePin(Led_8_GPIO_Port, Led_8_Pin, RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001f8:	4811      	ldr	r0, [pc, #68]	; (8000240 <setNumberOnClock.5429+0xf4>)
 80001fa:	f000 fcc5 	bl	8000b88 <HAL_GPIO_WritePin>
       		  break;
 80001fe:	e01b      	b.n	8000238 <setNumberOnClock.5429+0xec>
       	  case 9:
       		  HAL_GPIO_WritePin(Led_9_GPIO_Port, Led_9_Pin, RESET);
 8000200:	2200      	movs	r2, #0
 8000202:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000206:	480e      	ldr	r0, [pc, #56]	; (8000240 <setNumberOnClock.5429+0xf4>)
 8000208:	f000 fcbe 	bl	8000b88 <HAL_GPIO_WritePin>
       		  break;
 800020c:	e014      	b.n	8000238 <setNumberOnClock.5429+0xec>
       	  case 10:
       		  HAL_GPIO_WritePin(Led_10_GPIO_Port, Led_10_Pin, RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000214:	480a      	ldr	r0, [pc, #40]	; (8000240 <setNumberOnClock.5429+0xf4>)
 8000216:	f000 fcb7 	bl	8000b88 <HAL_GPIO_WritePin>
       		  break;
 800021a:	e00d      	b.n	8000238 <setNumberOnClock.5429+0xec>
       	  case 11:
       		  HAL_GPIO_WritePin(Led_11_GPIO_Port, Led_11_Pin, RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000222:	4807      	ldr	r0, [pc, #28]	; (8000240 <setNumberOnClock.5429+0xf4>)
 8000224:	f000 fcb0 	bl	8000b88 <HAL_GPIO_WritePin>
       		  break;
 8000228:	e006      	b.n	8000238 <setNumberOnClock.5429+0xec>
       	  case 12:
       		  HAL_GPIO_WritePin(Led_12_GPIO_Port, Led_12_Pin, RESET);
 800022a:	2200      	movs	r2, #0
 800022c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000230:	4803      	ldr	r0, [pc, #12]	; (8000240 <setNumberOnClock.5429+0xf4>)
 8000232:	f000 fca9 	bl	8000b88 <HAL_GPIO_WritePin>
       		  break;
 8000236:	bf00      	nop


       	  }
         }
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	40010800 	.word	0x40010800

08000244 <main>:
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
int main(void)
 800024a:	f107 0310 	add.w	r3, r7, #16
 800024e:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8000250:	f000 f9b6 	bl	80005c0 <HAL_Init>
  SystemClock_Config();
 8000254:	f000 f81a 	bl	800028c <SystemClock_Config>
  MX_GPIO_Init();
 8000258:	f000 f854 	bl	8000304 <MX_GPIO_Init>
        int num;

        while (1) {
                scanf("%d", &num);
 800025c:	463b      	mov	r3, r7
 800025e:	4619      	mov	r1, r3
 8000260:	4809      	ldr	r0, [pc, #36]	; (8000288 <main+0x44>)
 8000262:	f001 f8b7 	bl	80013d4 <iscanf>

                if (num >= 0 && num <= 11) {
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	2b00      	cmp	r3, #0
 800026a:	db08      	blt.n	800027e <main+0x3a>
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	2b0b      	cmp	r3, #11
 8000270:	dc05      	bgt.n	800027e <main+0x3a>
                    setNumberOnClock(num);
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	1d3a      	adds	r2, r7, #4
 8000276:	4694      	mov	ip, r2
 8000278:	4618      	mov	r0, r3
 800027a:	f7ff ff67 	bl	800014c <setNumberOnClock.5429>
                }
                HAL_Delay(1000);
 800027e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000282:	f000 f9ff 	bl	8000684 <HAL_Delay>
        while (1) {
 8000286:	e7e9      	b.n	800025c <main+0x18>
 8000288:	080027a0 	.word	0x080027a0

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b090      	sub	sp, #64	; 0x40
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0318 	add.w	r3, r7, #24
 8000296:	2228      	movs	r2, #40	; 0x28
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f001 f892 	bl	80013c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ae:	2302      	movs	r3, #2
 80002b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b2:	2301      	movs	r3, #1
 80002b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b6:	2310      	movs	r3, #16
 80002b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ba:	2300      	movs	r3, #0
 80002bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 fc78 	bl	8000bb8 <HAL_RCC_OscConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ce:	f000 f84d 	bl	800036c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	230f      	movs	r3, #15
 80002d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 fee4 	bl	80010b8 <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002f6:	f000 f839 	bl	800036c <Error_Handler>
  }
}
 80002fa:	bf00      	nop
 80002fc:	3740      	adds	r7, #64	; 0x40
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030a:	f107 0308 	add.w	r3, r7, #8
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000318:	4b12      	ldr	r3, [pc, #72]	; (8000364 <MX_GPIO_Init+0x60>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a11      	ldr	r2, [pc, #68]	; (8000364 <MX_GPIO_Init+0x60>)
 800031e:	f043 0304 	orr.w	r3, r3, #4
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <MX_GPIO_Init+0x60>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0304 	and.w	r3, r3, #4
 800032c:	607b      	str	r3, [r7, #4]
 800032e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_1_Pin|Led_2_Pin|Led_3_Pin|Led_4_Pin
 8000330:	2200      	movs	r2, #0
 8000332:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8000336:	480c      	ldr	r0, [pc, #48]	; (8000368 <MX_GPIO_Init+0x64>)
 8000338:	f000 fc26 	bl	8000b88 <HAL_GPIO_WritePin>
                          |Led_9_Pin|Led_10_Pin|Led_11_Pin|Led_12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Led_1_Pin Led_2_Pin Led_3_Pin Led_4_Pin
                           Led_5_Pin Led_6_Pin Led_7_Pin Led_8_Pin
                           Led_9_Pin Led_10_Pin Led_11_Pin Led_12_Pin */
  GPIO_InitStruct.Pin = Led_1_Pin|Led_2_Pin|Led_3_Pin|Led_4_Pin
 800033c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000340:	60bb      	str	r3, [r7, #8]
                          |Led_5_Pin|Led_6_Pin|Led_7_Pin|Led_8_Pin
                          |Led_9_Pin|Led_10_Pin|Led_11_Pin|Led_12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000342:	2301      	movs	r3, #1
 8000344:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000346:	2300      	movs	r3, #0
 8000348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034a:	2302      	movs	r3, #2
 800034c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	4619      	mov	r1, r3
 8000354:	4804      	ldr	r0, [pc, #16]	; (8000368 <MX_GPIO_Init+0x64>)
 8000356:	f000 fa9d 	bl	8000894 <HAL_GPIO_Init>

}
 800035a:	bf00      	nop
 800035c:	3718      	adds	r7, #24
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40021000 	.word	0x40021000
 8000368:	40010800 	.word	0x40010800

0800036c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000370:	b672      	cpsid	i
}
 8000372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000374:	e7fe      	b.n	8000374 <Error_Handler+0x8>
	...

08000378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800037e:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <HAL_MspInit+0x5c>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	4a14      	ldr	r2, [pc, #80]	; (80003d4 <HAL_MspInit+0x5c>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6193      	str	r3, [r2, #24]
 800038a:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <HAL_MspInit+0x5c>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	60bb      	str	r3, [r7, #8]
 8000394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <HAL_MspInit+0x5c>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	4a0e      	ldr	r2, [pc, #56]	; (80003d4 <HAL_MspInit+0x5c>)
 800039c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a0:	61d3      	str	r3, [r2, #28]
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <HAL_MspInit+0x5c>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80003ae:	4b0a      	ldr	r3, [pc, #40]	; (80003d8 <HAL_MspInit+0x60>)
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	4a04      	ldr	r2, [pc, #16]	; (80003d8 <HAL_MspInit+0x60>)
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ca:	bf00      	nop
 80003cc:	3714      	adds	r7, #20
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40010000 	.word	0x40010000

080003dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003e0:	e7fe      	b.n	80003e0 <NMI_Handler+0x4>

080003e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003e6:	e7fe      	b.n	80003e6 <HardFault_Handler+0x4>

080003e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003ec:	e7fe      	b.n	80003ec <MemManage_Handler+0x4>

080003ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003f2:	e7fe      	b.n	80003f2 <BusFault_Handler+0x4>

080003f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <UsageFault_Handler+0x4>

080003fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr

08000406 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800040a:	bf00      	nop
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr

08000412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr

0800041e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800041e:	b580      	push	{r7, lr}
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000422:	f000 f913 	bl	800064c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}

0800042a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800042a:	b580      	push	{r7, lr}
 800042c:	b086      	sub	sp, #24
 800042e:	af00      	add	r7, sp, #0
 8000430:	60f8      	str	r0, [r7, #12]
 8000432:	60b9      	str	r1, [r7, #8]
 8000434:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000436:	2300      	movs	r3, #0
 8000438:	617b      	str	r3, [r7, #20]
 800043a:	e00a      	b.n	8000452 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800043c:	f3af 8000 	nop.w
 8000440:	4601      	mov	r1, r0
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	1c5a      	adds	r2, r3, #1
 8000446:	60ba      	str	r2, [r7, #8]
 8000448:	b2ca      	uxtb	r2, r1
 800044a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	3301      	adds	r3, #1
 8000450:	617b      	str	r3, [r7, #20]
 8000452:	697a      	ldr	r2, [r7, #20]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	429a      	cmp	r2, r3
 8000458:	dbf0      	blt.n	800043c <_read+0x12>
	}

return len;
 800045a:	687b      	ldr	r3, [r7, #4]
}
 800045c:	4618      	mov	r0, r3
 800045e:	3718      	adds	r7, #24
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}

08000464 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000470:	2300      	movs	r3, #0
 8000472:	617b      	str	r3, [r7, #20]
 8000474:	e009      	b.n	800048a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000476:	68bb      	ldr	r3, [r7, #8]
 8000478:	1c5a      	adds	r2, r3, #1
 800047a:	60ba      	str	r2, [r7, #8]
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	4618      	mov	r0, r3
 8000480:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	3301      	adds	r3, #1
 8000488:	617b      	str	r3, [r7, #20]
 800048a:	697a      	ldr	r2, [r7, #20]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	429a      	cmp	r2, r3
 8000490:	dbf1      	blt.n	8000476 <_write+0x12>
	}
	return len;
 8000492:	687b      	ldr	r3, [r7, #4]
}
 8000494:	4618      	mov	r0, r3
 8000496:	3718      	adds	r7, #24
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <_close>:

int _close(int file)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	return -1;
 80004a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b083      	sub	sp, #12
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
 80004ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004c2:	605a      	str	r2, [r3, #4]
	return 0;
 80004c4:	2300      	movs	r3, #0
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <_isatty>:

int _isatty(int file)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	return 1;
 80004d8:	2301      	movs	r3, #1
}
 80004da:	4618      	mov	r0, r3
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
	return 0;
 80004f0:	2300      	movs	r3, #0
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000504:	4a14      	ldr	r2, [pc, #80]	; (8000558 <_sbrk+0x5c>)
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <_sbrk+0x60>)
 8000508:	1ad3      	subs	r3, r2, r3
 800050a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000510:	4b13      	ldr	r3, [pc, #76]	; (8000560 <_sbrk+0x64>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d102      	bne.n	800051e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <_sbrk+0x64>)
 800051a:	4a12      	ldr	r2, [pc, #72]	; (8000564 <_sbrk+0x68>)
 800051c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800051e:	4b10      	ldr	r3, [pc, #64]	; (8000560 <_sbrk+0x64>)
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4413      	add	r3, r2
 8000526:	693a      	ldr	r2, [r7, #16]
 8000528:	429a      	cmp	r2, r3
 800052a:	d207      	bcs.n	800053c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800052c:	f000 ff20 	bl	8001370 <__errno>
 8000530:	4603      	mov	r3, r0
 8000532:	220c      	movs	r2, #12
 8000534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000536:	f04f 33ff 	mov.w	r3, #4294967295
 800053a:	e009      	b.n	8000550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800053c:	4b08      	ldr	r3, [pc, #32]	; (8000560 <_sbrk+0x64>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000542:	4b07      	ldr	r3, [pc, #28]	; (8000560 <_sbrk+0x64>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4413      	add	r3, r2
 800054a:	4a05      	ldr	r2, [pc, #20]	; (8000560 <_sbrk+0x64>)
 800054c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800054e:	68fb      	ldr	r3, [r7, #12]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3718      	adds	r7, #24
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20002800 	.word	0x20002800
 800055c:	00000400 	.word	0x00000400
 8000560:	2000008c 	.word	0x2000008c
 8000564:	200000b0 	.word	0x200000b0

08000568 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr

08000574 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000574:	f7ff fff8 	bl	8000568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000578:	480b      	ldr	r0, [pc, #44]	; (80005a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800057a:	490c      	ldr	r1, [pc, #48]	; (80005ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800057c:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000580:	e002      	b.n	8000588 <LoopCopyDataInit>

08000582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000586:	3304      	adds	r3, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800058c:	d3f9      	bcc.n	8000582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058e:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000590:	4c09      	ldr	r4, [pc, #36]	; (80005b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000594:	e001      	b.n	800059a <LoopFillZerobss>

08000596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000598:	3204      	adds	r2, #4

0800059a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800059c:	d3fb      	bcc.n	8000596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800059e:	f000 feed 	bl	800137c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005a2:	f7ff fe4f 	bl	8000244 <main>
  bx lr
 80005a6:	4770      	bx	lr
  ldr r0, =_sdata
 80005a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80005b0:	08002960 	.word	0x08002960
  ldr r2, =_sbss
 80005b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80005b8:	200000ac 	.word	0x200000ac

080005bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005bc:	e7fe      	b.n	80005bc <ADC1_2_IRQHandler>
	...

080005c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <HAL_Init+0x28>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <HAL_Init+0x28>)
 80005ca:	f043 0310 	orr.w	r3, r3, #16
 80005ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d0:	2003      	movs	r0, #3
 80005d2:	f000 f92b 	bl	800082c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d6:	200f      	movs	r0, #15
 80005d8:	f000 f808 	bl	80005ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005dc:	f7ff fecc 	bl	8000378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e0:	2300      	movs	r3, #0
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40022000 	.word	0x40022000

080005ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_InitTick+0x54>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_InitTick+0x58>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4619      	mov	r1, r3
 80005fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000602:	fbb3 f3f1 	udiv	r3, r3, r1
 8000606:	fbb2 f3f3 	udiv	r3, r2, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f935 	bl	800087a <HAL_SYSTICK_Config>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000616:	2301      	movs	r3, #1
 8000618:	e00e      	b.n	8000638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2b0f      	cmp	r3, #15
 800061e:	d80a      	bhi.n	8000636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000620:	2200      	movs	r2, #0
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	f04f 30ff 	mov.w	r0, #4294967295
 8000628:	f000 f90b 	bl	8000842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800062c:	4a06      	ldr	r2, [pc, #24]	; (8000648 <HAL_InitTick+0x5c>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000632:	2300      	movs	r3, #0
 8000634:	e000      	b.n	8000638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000636:	2301      	movs	r3, #1
}
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000000 	.word	0x20000000
 8000644:	20000008 	.word	0x20000008
 8000648:	20000004 	.word	0x20000004

0800064c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <HAL_IncTick+0x1c>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <HAL_IncTick+0x20>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4413      	add	r3, r2
 800065c:	4a03      	ldr	r2, [pc, #12]	; (800066c <HAL_IncTick+0x20>)
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	20000008 	.word	0x20000008
 800066c:	20000098 	.word	0x20000098

08000670 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return uwTick;
 8000674:	4b02      	ldr	r3, [pc, #8]	; (8000680 <HAL_GetTick+0x10>)
 8000676:	681b      	ldr	r3, [r3, #0]
}
 8000678:	4618      	mov	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	20000098 	.word	0x20000098

08000684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800068c:	f7ff fff0 	bl	8000670 <HAL_GetTick>
 8000690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800069c:	d005      	beq.n	80006aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <HAL_Delay+0x44>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4413      	add	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006aa:	bf00      	nop
 80006ac:	f7ff ffe0 	bl	8000670 <HAL_GetTick>
 80006b0:	4602      	mov	r2, r0
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d8f7      	bhi.n	80006ac <HAL_Delay+0x28>
  {
  }
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000008 	.word	0x20000008

080006cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <__NVIC_SetPriorityGrouping+0x44>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e8:	4013      	ands	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fe:	4a04      	ldr	r2, [pc, #16]	; (8000710 <__NVIC_SetPriorityGrouping+0x44>)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	60d3      	str	r3, [r2, #12]
}
 8000704:	bf00      	nop
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000718:	4b04      	ldr	r3, [pc, #16]	; (800072c <__NVIC_GetPriorityGrouping+0x18>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	0a1b      	lsrs	r3, r3, #8
 800071e:	f003 0307 	and.w	r3, r3, #7
}
 8000722:	4618      	mov	r0, r3
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	6039      	str	r1, [r7, #0]
 800073a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800073c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000740:	2b00      	cmp	r3, #0
 8000742:	db0a      	blt.n	800075a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	b2da      	uxtb	r2, r3
 8000748:	490c      	ldr	r1, [pc, #48]	; (800077c <__NVIC_SetPriority+0x4c>)
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	0112      	lsls	r2, r2, #4
 8000750:	b2d2      	uxtb	r2, r2
 8000752:	440b      	add	r3, r1
 8000754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000758:	e00a      	b.n	8000770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4908      	ldr	r1, [pc, #32]	; (8000780 <__NVIC_SetPriority+0x50>)
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	f003 030f 	and.w	r3, r3, #15
 8000766:	3b04      	subs	r3, #4
 8000768:	0112      	lsls	r2, r2, #4
 800076a:	b2d2      	uxtb	r2, r2
 800076c:	440b      	add	r3, r1
 800076e:	761a      	strb	r2, [r3, #24]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000e100 	.word	0xe000e100
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000784:	b480      	push	{r7}
 8000786:	b089      	sub	sp, #36	; 0x24
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f003 0307 	and.w	r3, r3, #7
 8000796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	f1c3 0307 	rsb	r3, r3, #7
 800079e:	2b04      	cmp	r3, #4
 80007a0:	bf28      	it	cs
 80007a2:	2304      	movcs	r3, #4
 80007a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3304      	adds	r3, #4
 80007aa:	2b06      	cmp	r3, #6
 80007ac:	d902      	bls.n	80007b4 <NVIC_EncodePriority+0x30>
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3b03      	subs	r3, #3
 80007b2:	e000      	b.n	80007b6 <NVIC_EncodePriority+0x32>
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b8:	f04f 32ff 	mov.w	r2, #4294967295
 80007bc:	69bb      	ldr	r3, [r7, #24]
 80007be:	fa02 f303 	lsl.w	r3, r2, r3
 80007c2:	43da      	mvns	r2, r3
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	401a      	ands	r2, r3
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007cc:	f04f 31ff 	mov.w	r1, #4294967295
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	fa01 f303 	lsl.w	r3, r1, r3
 80007d6:	43d9      	mvns	r1, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007dc:	4313      	orrs	r3, r2
         );
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3724      	adds	r7, #36	; 0x24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr

080007e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007f8:	d301      	bcc.n	80007fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007fa:	2301      	movs	r3, #1
 80007fc:	e00f      	b.n	800081e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <SysTick_Config+0x40>)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3b01      	subs	r3, #1
 8000804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000806:	210f      	movs	r1, #15
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	f7ff ff90 	bl	8000730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <SysTick_Config+0x40>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <SysTick_Config+0x40>)
 8000818:	2207      	movs	r2, #7
 800081a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	e000e010 	.word	0xe000e010

0800082c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f7ff ff49 	bl	80006cc <__NVIC_SetPriorityGrouping>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000842:	b580      	push	{r7, lr}
 8000844:	b086      	sub	sp, #24
 8000846:	af00      	add	r7, sp, #0
 8000848:	4603      	mov	r3, r0
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	607a      	str	r2, [r7, #4]
 800084e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000854:	f7ff ff5e 	bl	8000714 <__NVIC_GetPriorityGrouping>
 8000858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	6978      	ldr	r0, [r7, #20]
 8000860:	f7ff ff90 	bl	8000784 <NVIC_EncodePriority>
 8000864:	4602      	mov	r2, r0
 8000866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800086a:	4611      	mov	r1, r2
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff5f 	bl	8000730 <__NVIC_SetPriority>
}
 8000872:	bf00      	nop
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff ffb0 	bl	80007e8 <SysTick_Config>
 8000888:	4603      	mov	r3, r0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000894:	b480      	push	{r7}
 8000896:	b08b      	sub	sp, #44	; 0x2c
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008a6:	e148      	b.n	8000b3a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008a8:	2201      	movs	r2, #1
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	69fa      	ldr	r2, [r7, #28]
 80008b8:	4013      	ands	r3, r2
 80008ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	f040 8137 	bne.w	8000b34 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	4aa3      	ldr	r2, [pc, #652]	; (8000b58 <HAL_GPIO_Init+0x2c4>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d05e      	beq.n	800098e <HAL_GPIO_Init+0xfa>
 80008d0:	4aa1      	ldr	r2, [pc, #644]	; (8000b58 <HAL_GPIO_Init+0x2c4>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d875      	bhi.n	80009c2 <HAL_GPIO_Init+0x12e>
 80008d6:	4aa1      	ldr	r2, [pc, #644]	; (8000b5c <HAL_GPIO_Init+0x2c8>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d058      	beq.n	800098e <HAL_GPIO_Init+0xfa>
 80008dc:	4a9f      	ldr	r2, [pc, #636]	; (8000b5c <HAL_GPIO_Init+0x2c8>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d86f      	bhi.n	80009c2 <HAL_GPIO_Init+0x12e>
 80008e2:	4a9f      	ldr	r2, [pc, #636]	; (8000b60 <HAL_GPIO_Init+0x2cc>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d052      	beq.n	800098e <HAL_GPIO_Init+0xfa>
 80008e8:	4a9d      	ldr	r2, [pc, #628]	; (8000b60 <HAL_GPIO_Init+0x2cc>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d869      	bhi.n	80009c2 <HAL_GPIO_Init+0x12e>
 80008ee:	4a9d      	ldr	r2, [pc, #628]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d04c      	beq.n	800098e <HAL_GPIO_Init+0xfa>
 80008f4:	4a9b      	ldr	r2, [pc, #620]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d863      	bhi.n	80009c2 <HAL_GPIO_Init+0x12e>
 80008fa:	4a9b      	ldr	r2, [pc, #620]	; (8000b68 <HAL_GPIO_Init+0x2d4>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d046      	beq.n	800098e <HAL_GPIO_Init+0xfa>
 8000900:	4a99      	ldr	r2, [pc, #612]	; (8000b68 <HAL_GPIO_Init+0x2d4>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d85d      	bhi.n	80009c2 <HAL_GPIO_Init+0x12e>
 8000906:	2b12      	cmp	r3, #18
 8000908:	d82a      	bhi.n	8000960 <HAL_GPIO_Init+0xcc>
 800090a:	2b12      	cmp	r3, #18
 800090c:	d859      	bhi.n	80009c2 <HAL_GPIO_Init+0x12e>
 800090e:	a201      	add	r2, pc, #4	; (adr r2, 8000914 <HAL_GPIO_Init+0x80>)
 8000910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000914:	0800098f 	.word	0x0800098f
 8000918:	08000969 	.word	0x08000969
 800091c:	0800097b 	.word	0x0800097b
 8000920:	080009bd 	.word	0x080009bd
 8000924:	080009c3 	.word	0x080009c3
 8000928:	080009c3 	.word	0x080009c3
 800092c:	080009c3 	.word	0x080009c3
 8000930:	080009c3 	.word	0x080009c3
 8000934:	080009c3 	.word	0x080009c3
 8000938:	080009c3 	.word	0x080009c3
 800093c:	080009c3 	.word	0x080009c3
 8000940:	080009c3 	.word	0x080009c3
 8000944:	080009c3 	.word	0x080009c3
 8000948:	080009c3 	.word	0x080009c3
 800094c:	080009c3 	.word	0x080009c3
 8000950:	080009c3 	.word	0x080009c3
 8000954:	080009c3 	.word	0x080009c3
 8000958:	08000971 	.word	0x08000971
 800095c:	08000985 	.word	0x08000985
 8000960:	4a82      	ldr	r2, [pc, #520]	; (8000b6c <HAL_GPIO_Init+0x2d8>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d013      	beq.n	800098e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000966:	e02c      	b.n	80009c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	623b      	str	r3, [r7, #32]
          break;
 800096e:	e029      	b.n	80009c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	3304      	adds	r3, #4
 8000976:	623b      	str	r3, [r7, #32]
          break;
 8000978:	e024      	b.n	80009c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	3308      	adds	r3, #8
 8000980:	623b      	str	r3, [r7, #32]
          break;
 8000982:	e01f      	b.n	80009c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	330c      	adds	r3, #12
 800098a:	623b      	str	r3, [r7, #32]
          break;
 800098c:	e01a      	b.n	80009c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d102      	bne.n	800099c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000996:	2304      	movs	r3, #4
 8000998:	623b      	str	r3, [r7, #32]
          break;
 800099a:	e013      	b.n	80009c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d105      	bne.n	80009b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009a4:	2308      	movs	r3, #8
 80009a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	69fa      	ldr	r2, [r7, #28]
 80009ac:	611a      	str	r2, [r3, #16]
          break;
 80009ae:	e009      	b.n	80009c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009b0:	2308      	movs	r3, #8
 80009b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	69fa      	ldr	r2, [r7, #28]
 80009b8:	615a      	str	r2, [r3, #20]
          break;
 80009ba:	e003      	b.n	80009c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
          break;
 80009c0:	e000      	b.n	80009c4 <HAL_GPIO_Init+0x130>
          break;
 80009c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	2bff      	cmp	r3, #255	; 0xff
 80009c8:	d801      	bhi.n	80009ce <HAL_GPIO_Init+0x13a>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	e001      	b.n	80009d2 <HAL_GPIO_Init+0x13e>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3304      	adds	r3, #4
 80009d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	2bff      	cmp	r3, #255	; 0xff
 80009d8:	d802      	bhi.n	80009e0 <HAL_GPIO_Init+0x14c>
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	e002      	b.n	80009e6 <HAL_GPIO_Init+0x152>
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	3b08      	subs	r3, #8
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	210f      	movs	r1, #15
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	fa01 f303 	lsl.w	r3, r1, r3
 80009f4:	43db      	mvns	r3, r3
 80009f6:	401a      	ands	r2, r3
 80009f8:	6a39      	ldr	r1, [r7, #32]
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000a00:	431a      	orrs	r2, r3
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f000 8090 	beq.w	8000b34 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a14:	4b56      	ldr	r3, [pc, #344]	; (8000b70 <HAL_GPIO_Init+0x2dc>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a55      	ldr	r2, [pc, #340]	; (8000b70 <HAL_GPIO_Init+0x2dc>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b53      	ldr	r3, [pc, #332]	; (8000b70 <HAL_GPIO_Init+0x2dc>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a2c:	4a51      	ldr	r2, [pc, #324]	; (8000b74 <HAL_GPIO_Init+0x2e0>)
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	089b      	lsrs	r3, r3, #2
 8000a32:	3302      	adds	r3, #2
 8000a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3c:	f003 0303 	and.w	r3, r3, #3
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	220f      	movs	r2, #15
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a49      	ldr	r2, [pc, #292]	; (8000b78 <HAL_GPIO_Init+0x2e4>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d00d      	beq.n	8000a74 <HAL_GPIO_Init+0x1e0>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a48      	ldr	r2, [pc, #288]	; (8000b7c <HAL_GPIO_Init+0x2e8>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d007      	beq.n	8000a70 <HAL_GPIO_Init+0x1dc>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a47      	ldr	r2, [pc, #284]	; (8000b80 <HAL_GPIO_Init+0x2ec>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d101      	bne.n	8000a6c <HAL_GPIO_Init+0x1d8>
 8000a68:	2302      	movs	r3, #2
 8000a6a:	e004      	b.n	8000a76 <HAL_GPIO_Init+0x1e2>
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	e002      	b.n	8000a76 <HAL_GPIO_Init+0x1e2>
 8000a70:	2301      	movs	r3, #1
 8000a72:	e000      	b.n	8000a76 <HAL_GPIO_Init+0x1e2>
 8000a74:	2300      	movs	r3, #0
 8000a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a78:	f002 0203 	and.w	r2, r2, #3
 8000a7c:	0092      	lsls	r2, r2, #2
 8000a7e:	4093      	lsls	r3, r2
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a86:	493b      	ldr	r1, [pc, #236]	; (8000b74 <HAL_GPIO_Init+0x2e0>)
 8000a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8a:	089b      	lsrs	r3, r3, #2
 8000a8c:	3302      	adds	r3, #2
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d006      	beq.n	8000aae <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000aa0:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000aa2:	689a      	ldr	r2, [r3, #8]
 8000aa4:	4937      	ldr	r1, [pc, #220]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	608b      	str	r3, [r1, #8]
 8000aac:	e006      	b.n	8000abc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000aae:	4b35      	ldr	r3, [pc, #212]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000ab0:	689a      	ldr	r2, [r3, #8]
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	4933      	ldr	r1, [pc, #204]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000ab8:	4013      	ands	r3, r2
 8000aba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d006      	beq.n	8000ad6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ac8:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000aca:	68da      	ldr	r2, [r3, #12]
 8000acc:	492d      	ldr	r1, [pc, #180]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	60cb      	str	r3, [r1, #12]
 8000ad4:	e006      	b.n	8000ae4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000ad8:	68da      	ldr	r2, [r3, #12]
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	4929      	ldr	r1, [pc, #164]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d006      	beq.n	8000afe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000af0:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	4923      	ldr	r1, [pc, #140]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	604b      	str	r3, [r1, #4]
 8000afc:	e006      	b.n	8000b0c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000afe:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	43db      	mvns	r3, r3
 8000b06:	491f      	ldr	r1, [pc, #124]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000b08:	4013      	ands	r3, r2
 8000b0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d006      	beq.n	8000b26 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4919      	ldr	r1, [pc, #100]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	600b      	str	r3, [r1, #0]
 8000b24:	e006      	b.n	8000b34 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	4915      	ldr	r1, [pc, #84]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000b30:	4013      	ands	r3, r2
 8000b32:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b36:	3301      	adds	r3, #1
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	fa22 f303 	lsr.w	r3, r2, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f47f aeaf 	bne.w	80008a8 <HAL_GPIO_Init+0x14>
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	bf00      	nop
 8000b4e:	372c      	adds	r7, #44	; 0x2c
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	10320000 	.word	0x10320000
 8000b5c:	10310000 	.word	0x10310000
 8000b60:	10220000 	.word	0x10220000
 8000b64:	10210000 	.word	0x10210000
 8000b68:	10120000 	.word	0x10120000
 8000b6c:	10110000 	.word	0x10110000
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40010000 	.word	0x40010000
 8000b78:	40010800 	.word	0x40010800
 8000b7c:	40010c00 	.word	0x40010c00
 8000b80:	40011000 	.word	0x40011000
 8000b84:	40010400 	.word	0x40010400

08000b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
 8000b94:	4613      	mov	r3, r2
 8000b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b98:	787b      	ldrb	r3, [r7, #1]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b9e:	887a      	ldrh	r2, [r7, #2]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ba4:	e003      	b.n	8000bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	041a      	lsls	r2, r3, #16
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	611a      	str	r2, [r3, #16]
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d101      	bne.n	8000bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e26c      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f000 8087 	beq.w	8000ce6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bd8:	4b92      	ldr	r3, [pc, #584]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 030c 	and.w	r3, r3, #12
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d00c      	beq.n	8000bfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000be4:	4b8f      	ldr	r3, [pc, #572]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 030c 	and.w	r3, r3, #12
 8000bec:	2b08      	cmp	r3, #8
 8000bee:	d112      	bne.n	8000c16 <HAL_RCC_OscConfig+0x5e>
 8000bf0:	4b8c      	ldr	r3, [pc, #560]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bfc:	d10b      	bne.n	8000c16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bfe:	4b89      	ldr	r3, [pc, #548]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d06c      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x12c>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d168      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e246      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c1e:	d106      	bne.n	8000c2e <HAL_RCC_OscConfig+0x76>
 8000c20:	4b80      	ldr	r3, [pc, #512]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a7f      	ldr	r2, [pc, #508]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	e02e      	b.n	8000c8c <HAL_RCC_OscConfig+0xd4>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d10c      	bne.n	8000c50 <HAL_RCC_OscConfig+0x98>
 8000c36:	4b7b      	ldr	r3, [pc, #492]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a7a      	ldr	r2, [pc, #488]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	4b78      	ldr	r3, [pc, #480]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a77      	ldr	r2, [pc, #476]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e01d      	b.n	8000c8c <HAL_RCC_OscConfig+0xd4>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c58:	d10c      	bne.n	8000c74 <HAL_RCC_OscConfig+0xbc>
 8000c5a:	4b72      	ldr	r3, [pc, #456]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a71      	ldr	r2, [pc, #452]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	4b6f      	ldr	r3, [pc, #444]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a6e      	ldr	r2, [pc, #440]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	e00b      	b.n	8000c8c <HAL_RCC_OscConfig+0xd4>
 8000c74:	4b6b      	ldr	r3, [pc, #428]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a6a      	ldr	r2, [pc, #424]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b68      	ldr	r3, [pc, #416]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a67      	ldr	r2, [pc, #412]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d013      	beq.n	8000cbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c94:	f7ff fcec 	bl	8000670 <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c9c:	f7ff fce8 	bl	8000670 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b64      	cmp	r3, #100	; 0x64
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e1fa      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cae:	4b5d      	ldr	r3, [pc, #372]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f0      	beq.n	8000c9c <HAL_RCC_OscConfig+0xe4>
 8000cba:	e014      	b.n	8000ce6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cbc:	f7ff fcd8 	bl	8000670 <HAL_GetTick>
 8000cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cc2:	e008      	b.n	8000cd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cc4:	f7ff fcd4 	bl	8000670 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b64      	cmp	r3, #100	; 0x64
 8000cd0:	d901      	bls.n	8000cd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e1e6      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cd6:	4b53      	ldr	r3, [pc, #332]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1f0      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x10c>
 8000ce2:	e000      	b.n	8000ce6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d063      	beq.n	8000dba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cf2:	4b4c      	ldr	r3, [pc, #304]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d00b      	beq.n	8000d16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cfe:	4b49      	ldr	r3, [pc, #292]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 030c 	and.w	r3, r3, #12
 8000d06:	2b08      	cmp	r3, #8
 8000d08:	d11c      	bne.n	8000d44 <HAL_RCC_OscConfig+0x18c>
 8000d0a:	4b46      	ldr	r3, [pc, #280]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d116      	bne.n	8000d44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d16:	4b43      	ldr	r3, [pc, #268]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d005      	beq.n	8000d2e <HAL_RCC_OscConfig+0x176>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	691b      	ldr	r3, [r3, #16]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d001      	beq.n	8000d2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e1ba      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d2e:	4b3d      	ldr	r3, [pc, #244]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	4939      	ldr	r1, [pc, #228]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d42:	e03a      	b.n	8000dba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d020      	beq.n	8000d8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d4c:	4b36      	ldr	r3, [pc, #216]	; (8000e28 <HAL_RCC_OscConfig+0x270>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d52:	f7ff fc8d 	bl	8000670 <HAL_GetTick>
 8000d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d58:	e008      	b.n	8000d6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d5a:	f7ff fc89 	bl	8000670 <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d901      	bls.n	8000d6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e19b      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d6c:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d0f0      	beq.n	8000d5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d78:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	4927      	ldr	r1, [pc, #156]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	600b      	str	r3, [r1, #0]
 8000d8c:	e015      	b.n	8000dba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d8e:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <HAL_RCC_OscConfig+0x270>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d94:	f7ff fc6c 	bl	8000670 <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d9c:	f7ff fc68 	bl	8000670 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e17a      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1f0      	bne.n	8000d9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d03a      	beq.n	8000e3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d019      	beq.n	8000e02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_RCC_OscConfig+0x274>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd4:	f7ff fc4c 	bl	8000670 <HAL_GetTick>
 8000dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dda:	e008      	b.n	8000dee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ddc:	f7ff fc48 	bl	8000670 <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e15a      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d0f0      	beq.n	8000ddc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f000 fa9a 	bl	8001334 <RCC_Delay>
 8000e00:	e01c      	b.n	8000e3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_RCC_OscConfig+0x274>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e08:	f7ff fc32 	bl	8000670 <HAL_GetTick>
 8000e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e0e:	e00f      	b.n	8000e30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e10:	f7ff fc2e 	bl	8000670 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d908      	bls.n	8000e30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e140      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000
 8000e28:	42420000 	.word	0x42420000
 8000e2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e30:	4b9e      	ldr	r3, [pc, #632]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1e9      	bne.n	8000e10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f000 80a6 	beq.w	8000f96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e4e:	4b97      	ldr	r3, [pc, #604]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10d      	bne.n	8000e76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	4b94      	ldr	r3, [pc, #592]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	4a93      	ldr	r2, [pc, #588]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e64:	61d3      	str	r3, [r2, #28]
 8000e66:	4b91      	ldr	r3, [pc, #580]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e72:	2301      	movs	r3, #1
 8000e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e76:	4b8e      	ldr	r3, [pc, #568]	; (80010b0 <HAL_RCC_OscConfig+0x4f8>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d118      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e82:	4b8b      	ldr	r3, [pc, #556]	; (80010b0 <HAL_RCC_OscConfig+0x4f8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a8a      	ldr	r2, [pc, #552]	; (80010b0 <HAL_RCC_OscConfig+0x4f8>)
 8000e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e8e:	f7ff fbef 	bl	8000670 <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e96:	f7ff fbeb 	bl	8000670 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b64      	cmp	r3, #100	; 0x64
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e0fd      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea8:	4b81      	ldr	r3, [pc, #516]	; (80010b0 <HAL_RCC_OscConfig+0x4f8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0f0      	beq.n	8000e96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d106      	bne.n	8000eca <HAL_RCC_OscConfig+0x312>
 8000ebc:	4b7b      	ldr	r3, [pc, #492]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	4a7a      	ldr	r2, [pc, #488]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	6213      	str	r3, [r2, #32]
 8000ec8:	e02d      	b.n	8000f26 <HAL_RCC_OscConfig+0x36e>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10c      	bne.n	8000eec <HAL_RCC_OscConfig+0x334>
 8000ed2:	4b76      	ldr	r3, [pc, #472]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000ed4:	6a1b      	ldr	r3, [r3, #32]
 8000ed6:	4a75      	ldr	r2, [pc, #468]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000ed8:	f023 0301 	bic.w	r3, r3, #1
 8000edc:	6213      	str	r3, [r2, #32]
 8000ede:	4b73      	ldr	r3, [pc, #460]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
 8000ee2:	4a72      	ldr	r2, [pc, #456]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000ee4:	f023 0304 	bic.w	r3, r3, #4
 8000ee8:	6213      	str	r3, [r2, #32]
 8000eea:	e01c      	b.n	8000f26 <HAL_RCC_OscConfig+0x36e>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	2b05      	cmp	r3, #5
 8000ef2:	d10c      	bne.n	8000f0e <HAL_RCC_OscConfig+0x356>
 8000ef4:	4b6d      	ldr	r3, [pc, #436]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	4a6c      	ldr	r2, [pc, #432]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	6213      	str	r3, [r2, #32]
 8000f00:	4b6a      	ldr	r3, [pc, #424]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	4a69      	ldr	r2, [pc, #420]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6213      	str	r3, [r2, #32]
 8000f0c:	e00b      	b.n	8000f26 <HAL_RCC_OscConfig+0x36e>
 8000f0e:	4b67      	ldr	r3, [pc, #412]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000f10:	6a1b      	ldr	r3, [r3, #32]
 8000f12:	4a66      	ldr	r2, [pc, #408]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000f14:	f023 0301 	bic.w	r3, r3, #1
 8000f18:	6213      	str	r3, [r2, #32]
 8000f1a:	4b64      	ldr	r3, [pc, #400]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000f1c:	6a1b      	ldr	r3, [r3, #32]
 8000f1e:	4a63      	ldr	r2, [pc, #396]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000f20:	f023 0304 	bic.w	r3, r3, #4
 8000f24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d015      	beq.n	8000f5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2e:	f7ff fb9f 	bl	8000670 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f34:	e00a      	b.n	8000f4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f36:	f7ff fb9b 	bl	8000670 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e0ab      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f4c:	4b57      	ldr	r3, [pc, #348]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0ee      	beq.n	8000f36 <HAL_RCC_OscConfig+0x37e>
 8000f58:	e014      	b.n	8000f84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f5a:	f7ff fb89 	bl	8000670 <HAL_GetTick>
 8000f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f60:	e00a      	b.n	8000f78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f62:	f7ff fb85 	bl	8000670 <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e095      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f78:	4b4c      	ldr	r3, [pc, #304]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1ee      	bne.n	8000f62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d105      	bne.n	8000f96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f8a:	4b48      	ldr	r3, [pc, #288]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a47      	ldr	r2, [pc, #284]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 8081 	beq.w	80010a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fa0:	4b42      	ldr	r3, [pc, #264]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 030c 	and.w	r3, r3, #12
 8000fa8:	2b08      	cmp	r3, #8
 8000faa:	d061      	beq.n	8001070 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69db      	ldr	r3, [r3, #28]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d146      	bne.n	8001042 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fb4:	4b3f      	ldr	r3, [pc, #252]	; (80010b4 <HAL_RCC_OscConfig+0x4fc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fba:	f7ff fb59 	bl	8000670 <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc2:	f7ff fb55 	bl	8000670 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e067      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd4:	4b35      	ldr	r3, [pc, #212]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f0      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe8:	d108      	bne.n	8000ffc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fea:	4b30      	ldr	r3, [pc, #192]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	492d      	ldr	r1, [pc, #180]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ffc:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a19      	ldr	r1, [r3, #32]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	430b      	orrs	r3, r1
 800100e:	4927      	ldr	r1, [pc, #156]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8001010:	4313      	orrs	r3, r2
 8001012:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001014:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <HAL_RCC_OscConfig+0x4fc>)
 8001016:	2201      	movs	r2, #1
 8001018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101a:	f7ff fb29 	bl	8000670 <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001022:	f7ff fb25 	bl	8000670 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e037      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0f0      	beq.n	8001022 <HAL_RCC_OscConfig+0x46a>
 8001040:	e02f      	b.n	80010a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <HAL_RCC_OscConfig+0x4fc>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fb12 	bl	8000670 <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001050:	f7ff fb0e 	bl	8000670 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e020      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001062:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f0      	bne.n	8001050 <HAL_RCC_OscConfig+0x498>
 800106e:	e018      	b.n	80010a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d101      	bne.n	800107c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e013      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	429a      	cmp	r2, r3
 800108e:	d106      	bne.n	800109e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800109a:	429a      	cmp	r2, r3
 800109c:	d001      	beq.n	80010a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40007000 	.word	0x40007000
 80010b4:	42420060 	.word	0x42420060

080010b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e0d0      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010cc:	4b6a      	ldr	r3, [pc, #424]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d910      	bls.n	80010fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010da:	4b67      	ldr	r3, [pc, #412]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f023 0207 	bic.w	r2, r3, #7
 80010e2:	4965      	ldr	r1, [pc, #404]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ea:	4b63      	ldr	r3, [pc, #396]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d001      	beq.n	80010fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e0b8      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d020      	beq.n	800114a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001114:	4b59      	ldr	r3, [pc, #356]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	4a58      	ldr	r2, [pc, #352]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800111e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800112c:	4b53      	ldr	r3, [pc, #332]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	4a52      	ldr	r2, [pc, #328]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001132:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001136:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001138:	4b50      	ldr	r3, [pc, #320]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	494d      	ldr	r1, [pc, #308]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001146:	4313      	orrs	r3, r2
 8001148:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d040      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d107      	bne.n	800116e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115e:	4b47      	ldr	r3, [pc, #284]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d115      	bne.n	8001196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e07f      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d107      	bne.n	8001186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001176:	4b41      	ldr	r3, [pc, #260]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d109      	bne.n	8001196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e073      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001186:	4b3d      	ldr	r3, [pc, #244]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e06b      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001196:	4b39      	ldr	r3, [pc, #228]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f023 0203 	bic.w	r2, r3, #3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	4936      	ldr	r1, [pc, #216]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011a8:	f7ff fa62 	bl	8000670 <HAL_GetTick>
 80011ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ae:	e00a      	b.n	80011c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b0:	f7ff fa5e 	bl	8000670 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80011be:	4293      	cmp	r3, r2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e053      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011c6:	4b2d      	ldr	r3, [pc, #180]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 020c 	and.w	r2, r3, #12
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d1eb      	bne.n	80011b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011d8:	4b27      	ldr	r3, [pc, #156]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d210      	bcs.n	8001208 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 0207 	bic.w	r2, r3, #7
 80011ee:	4922      	ldr	r1, [pc, #136]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d001      	beq.n	8001208 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e032      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d008      	beq.n	8001226 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	4916      	ldr	r1, [pc, #88]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	4313      	orrs	r3, r2
 8001224:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	2b00      	cmp	r3, #0
 8001230:	d009      	beq.n	8001246 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	490e      	ldr	r1, [pc, #56]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	4313      	orrs	r3, r2
 8001244:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001246:	f000 f821 	bl	800128c <HAL_RCC_GetSysClockFreq>
 800124a:	4602      	mov	r2, r0
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	091b      	lsrs	r3, r3, #4
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	490a      	ldr	r1, [pc, #40]	; (8001280 <HAL_RCC_ClockConfig+0x1c8>)
 8001258:	5ccb      	ldrb	r3, [r1, r3]
 800125a:	fa22 f303 	lsr.w	r3, r2, r3
 800125e:	4a09      	ldr	r2, [pc, #36]	; (8001284 <HAL_RCC_ClockConfig+0x1cc>)
 8001260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_RCC_ClockConfig+0x1d0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f9c0 	bl	80005ec <HAL_InitTick>

  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40022000 	.word	0x40022000
 800127c:	40021000 	.word	0x40021000
 8001280:	080027b0 	.word	0x080027b0
 8001284:	20000000 	.word	0x20000000
 8001288:	20000004 	.word	0x20000004

0800128c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012a6:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <HAL_RCC_GetSysClockFreq+0x94>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d002      	beq.n	80012bc <HAL_RCC_GetSysClockFreq+0x30>
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d003      	beq.n	80012c2 <HAL_RCC_GetSysClockFreq+0x36>
 80012ba:	e027      	b.n	800130c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <HAL_RCC_GetSysClockFreq+0x98>)
 80012be:	613b      	str	r3, [r7, #16]
      break;
 80012c0:	e027      	b.n	8001312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	0c9b      	lsrs	r3, r3, #18
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	4a17      	ldr	r2, [pc, #92]	; (8001328 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012cc:	5cd3      	ldrb	r3, [r2, r3]
 80012ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d010      	beq.n	80012fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_RCC_GetSysClockFreq+0x94>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	0c5b      	lsrs	r3, r3, #17
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	4a11      	ldr	r2, [pc, #68]	; (800132c <HAL_RCC_GetSysClockFreq+0xa0>)
 80012e6:	5cd3      	ldrb	r3, [r2, r3]
 80012e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ee:	fb02 f203 	mul.w	r2, r2, r3
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	e004      	b.n	8001306 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	613b      	str	r3, [r7, #16]
      break;
 800130a:	e002      	b.n	8001312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_RCC_GetSysClockFreq+0x98>)
 800130e:	613b      	str	r3, [r7, #16]
      break;
 8001310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001312:	693b      	ldr	r3, [r7, #16]
}
 8001314:	4618      	mov	r0, r3
 8001316:	371c      	adds	r7, #28
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000
 8001324:	007a1200 	.word	0x007a1200
 8001328:	080027c0 	.word	0x080027c0
 800132c:	080027d0 	.word	0x080027d0
 8001330:	003d0900 	.word	0x003d0900

08001334 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <RCC_Delay+0x34>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0a      	ldr	r2, [pc, #40]	; (800136c <RCC_Delay+0x38>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	0a5b      	lsrs	r3, r3, #9
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	fb02 f303 	mul.w	r3, r2, r3
 800134e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001350:	bf00      	nop
  }
  while (Delay --);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1e5a      	subs	r2, r3, #1
 8001356:	60fa      	str	r2, [r7, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f9      	bne.n	8001350 <RCC_Delay+0x1c>
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	20000000 	.word	0x20000000
 800136c:	10624dd3 	.word	0x10624dd3

08001370 <__errno>:
 8001370:	4b01      	ldr	r3, [pc, #4]	; (8001378 <__errno+0x8>)
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	2000000c 	.word	0x2000000c

0800137c <__libc_init_array>:
 800137c:	b570      	push	{r4, r5, r6, lr}
 800137e:	2600      	movs	r6, #0
 8001380:	4d0c      	ldr	r5, [pc, #48]	; (80013b4 <__libc_init_array+0x38>)
 8001382:	4c0d      	ldr	r4, [pc, #52]	; (80013b8 <__libc_init_array+0x3c>)
 8001384:	1b64      	subs	r4, r4, r5
 8001386:	10a4      	asrs	r4, r4, #2
 8001388:	42a6      	cmp	r6, r4
 800138a:	d109      	bne.n	80013a0 <__libc_init_array+0x24>
 800138c:	f001 f9fc 	bl	8002788 <_init>
 8001390:	2600      	movs	r6, #0
 8001392:	4d0a      	ldr	r5, [pc, #40]	; (80013bc <__libc_init_array+0x40>)
 8001394:	4c0a      	ldr	r4, [pc, #40]	; (80013c0 <__libc_init_array+0x44>)
 8001396:	1b64      	subs	r4, r4, r5
 8001398:	10a4      	asrs	r4, r4, #2
 800139a:	42a6      	cmp	r6, r4
 800139c:	d105      	bne.n	80013aa <__libc_init_array+0x2e>
 800139e:	bd70      	pop	{r4, r5, r6, pc}
 80013a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80013a4:	4798      	blx	r3
 80013a6:	3601      	adds	r6, #1
 80013a8:	e7ee      	b.n	8001388 <__libc_init_array+0xc>
 80013aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80013ae:	4798      	blx	r3
 80013b0:	3601      	adds	r6, #1
 80013b2:	e7f2      	b.n	800139a <__libc_init_array+0x1e>
 80013b4:	08002958 	.word	0x08002958
 80013b8:	08002958 	.word	0x08002958
 80013bc:	08002958 	.word	0x08002958
 80013c0:	0800295c 	.word	0x0800295c

080013c4 <memset>:
 80013c4:	4603      	mov	r3, r0
 80013c6:	4402      	add	r2, r0
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d100      	bne.n	80013ce <memset+0xa>
 80013cc:	4770      	bx	lr
 80013ce:	f803 1b01 	strb.w	r1, [r3], #1
 80013d2:	e7f9      	b.n	80013c8 <memset+0x4>

080013d4 <iscanf>:
 80013d4:	b40f      	push	{r0, r1, r2, r3}
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <iscanf+0x2c>)
 80013d8:	b513      	push	{r0, r1, r4, lr}
 80013da:	681c      	ldr	r4, [r3, #0]
 80013dc:	b124      	cbz	r4, 80013e8 <iscanf+0x14>
 80013de:	69a3      	ldr	r3, [r4, #24]
 80013e0:	b913      	cbnz	r3, 80013e8 <iscanf+0x14>
 80013e2:	4620      	mov	r0, r4
 80013e4:	f000 f866 	bl	80014b4 <__sinit>
 80013e8:	ab05      	add	r3, sp, #20
 80013ea:	4620      	mov	r0, r4
 80013ec:	9a04      	ldr	r2, [sp, #16]
 80013ee:	6861      	ldr	r1, [r4, #4]
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	f000 fb1b 	bl	8001a2c <_vfiscanf_r>
 80013f6:	b002      	add	sp, #8
 80013f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013fc:	b004      	add	sp, #16
 80013fe:	4770      	bx	lr
 8001400:	2000000c 	.word	0x2000000c

08001404 <std>:
 8001404:	2300      	movs	r3, #0
 8001406:	b510      	push	{r4, lr}
 8001408:	4604      	mov	r4, r0
 800140a:	e9c0 3300 	strd	r3, r3, [r0]
 800140e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001412:	6083      	str	r3, [r0, #8]
 8001414:	8181      	strh	r1, [r0, #12]
 8001416:	6643      	str	r3, [r0, #100]	; 0x64
 8001418:	81c2      	strh	r2, [r0, #14]
 800141a:	6183      	str	r3, [r0, #24]
 800141c:	4619      	mov	r1, r3
 800141e:	2208      	movs	r2, #8
 8001420:	305c      	adds	r0, #92	; 0x5c
 8001422:	f7ff ffcf 	bl	80013c4 <memset>
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <std+0x38>)
 8001428:	6224      	str	r4, [r4, #32]
 800142a:	6263      	str	r3, [r4, #36]	; 0x24
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <std+0x3c>)
 800142e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <std+0x40>)
 8001432:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <std+0x44>)
 8001436:	6323      	str	r3, [r4, #48]	; 0x30
 8001438:	bd10      	pop	{r4, pc}
 800143a:	bf00      	nop
 800143c:	08001ed1 	.word	0x08001ed1
 8001440:	08001ef3 	.word	0x08001ef3
 8001444:	08001f2b 	.word	0x08001f2b
 8001448:	08001f4f 	.word	0x08001f4f

0800144c <_cleanup_r>:
 800144c:	4901      	ldr	r1, [pc, #4]	; (8001454 <_cleanup_r+0x8>)
 800144e:	f000 b8cc 	b.w	80015ea <_fwalk_reent>
 8001452:	bf00      	nop
 8001454:	08002455 	.word	0x08002455

08001458 <__sfmoreglue>:
 8001458:	b570      	push	{r4, r5, r6, lr}
 800145a:	2568      	movs	r5, #104	; 0x68
 800145c:	1e4a      	subs	r2, r1, #1
 800145e:	4355      	muls	r5, r2
 8001460:	460e      	mov	r6, r1
 8001462:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001466:	f000 f8e3 	bl	8001630 <_malloc_r>
 800146a:	4604      	mov	r4, r0
 800146c:	b140      	cbz	r0, 8001480 <__sfmoreglue+0x28>
 800146e:	2100      	movs	r1, #0
 8001470:	e9c0 1600 	strd	r1, r6, [r0]
 8001474:	300c      	adds	r0, #12
 8001476:	60a0      	str	r0, [r4, #8]
 8001478:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800147c:	f7ff ffa2 	bl	80013c4 <memset>
 8001480:	4620      	mov	r0, r4
 8001482:	bd70      	pop	{r4, r5, r6, pc}

08001484 <__sfp_lock_acquire>:
 8001484:	4801      	ldr	r0, [pc, #4]	; (800148c <__sfp_lock_acquire+0x8>)
 8001486:	f000 b8d0 	b.w	800162a <__retarget_lock_acquire_recursive>
 800148a:	bf00      	nop
 800148c:	200000a4 	.word	0x200000a4

08001490 <__sfp_lock_release>:
 8001490:	4801      	ldr	r0, [pc, #4]	; (8001498 <__sfp_lock_release+0x8>)
 8001492:	f000 b8cb 	b.w	800162c <__retarget_lock_release_recursive>
 8001496:	bf00      	nop
 8001498:	200000a4 	.word	0x200000a4

0800149c <__sinit_lock_acquire>:
 800149c:	4801      	ldr	r0, [pc, #4]	; (80014a4 <__sinit_lock_acquire+0x8>)
 800149e:	f000 b8c4 	b.w	800162a <__retarget_lock_acquire_recursive>
 80014a2:	bf00      	nop
 80014a4:	2000009f 	.word	0x2000009f

080014a8 <__sinit_lock_release>:
 80014a8:	4801      	ldr	r0, [pc, #4]	; (80014b0 <__sinit_lock_release+0x8>)
 80014aa:	f000 b8bf 	b.w	800162c <__retarget_lock_release_recursive>
 80014ae:	bf00      	nop
 80014b0:	2000009f 	.word	0x2000009f

080014b4 <__sinit>:
 80014b4:	b510      	push	{r4, lr}
 80014b6:	4604      	mov	r4, r0
 80014b8:	f7ff fff0 	bl	800149c <__sinit_lock_acquire>
 80014bc:	69a3      	ldr	r3, [r4, #24]
 80014be:	b11b      	cbz	r3, 80014c8 <__sinit+0x14>
 80014c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014c4:	f7ff bff0 	b.w	80014a8 <__sinit_lock_release>
 80014c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80014cc:	6523      	str	r3, [r4, #80]	; 0x50
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <__sinit+0x68>)
 80014d0:	4a13      	ldr	r2, [pc, #76]	; (8001520 <__sinit+0x6c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80014d6:	42a3      	cmp	r3, r4
 80014d8:	bf08      	it	eq
 80014da:	2301      	moveq	r3, #1
 80014dc:	4620      	mov	r0, r4
 80014de:	bf08      	it	eq
 80014e0:	61a3      	streq	r3, [r4, #24]
 80014e2:	f000 f81f 	bl	8001524 <__sfp>
 80014e6:	6060      	str	r0, [r4, #4]
 80014e8:	4620      	mov	r0, r4
 80014ea:	f000 f81b 	bl	8001524 <__sfp>
 80014ee:	60a0      	str	r0, [r4, #8]
 80014f0:	4620      	mov	r0, r4
 80014f2:	f000 f817 	bl	8001524 <__sfp>
 80014f6:	2200      	movs	r2, #0
 80014f8:	2104      	movs	r1, #4
 80014fa:	60e0      	str	r0, [r4, #12]
 80014fc:	6860      	ldr	r0, [r4, #4]
 80014fe:	f7ff ff81 	bl	8001404 <std>
 8001502:	2201      	movs	r2, #1
 8001504:	2109      	movs	r1, #9
 8001506:	68a0      	ldr	r0, [r4, #8]
 8001508:	f7ff ff7c 	bl	8001404 <std>
 800150c:	2202      	movs	r2, #2
 800150e:	2112      	movs	r1, #18
 8001510:	68e0      	ldr	r0, [r4, #12]
 8001512:	f7ff ff77 	bl	8001404 <std>
 8001516:	2301      	movs	r3, #1
 8001518:	61a3      	str	r3, [r4, #24]
 800151a:	e7d1      	b.n	80014c0 <__sinit+0xc>
 800151c:	080027d4 	.word	0x080027d4
 8001520:	0800144d 	.word	0x0800144d

08001524 <__sfp>:
 8001524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001526:	4607      	mov	r7, r0
 8001528:	f7ff ffac 	bl	8001484 <__sfp_lock_acquire>
 800152c:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <__sfp+0x84>)
 800152e:	681e      	ldr	r6, [r3, #0]
 8001530:	69b3      	ldr	r3, [r6, #24]
 8001532:	b913      	cbnz	r3, 800153a <__sfp+0x16>
 8001534:	4630      	mov	r0, r6
 8001536:	f7ff ffbd 	bl	80014b4 <__sinit>
 800153a:	3648      	adds	r6, #72	; 0x48
 800153c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001540:	3b01      	subs	r3, #1
 8001542:	d503      	bpl.n	800154c <__sfp+0x28>
 8001544:	6833      	ldr	r3, [r6, #0]
 8001546:	b30b      	cbz	r3, 800158c <__sfp+0x68>
 8001548:	6836      	ldr	r6, [r6, #0]
 800154a:	e7f7      	b.n	800153c <__sfp+0x18>
 800154c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001550:	b9d5      	cbnz	r5, 8001588 <__sfp+0x64>
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <__sfp+0x88>)
 8001554:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001558:	60e3      	str	r3, [r4, #12]
 800155a:	6665      	str	r5, [r4, #100]	; 0x64
 800155c:	f000 f864 	bl	8001628 <__retarget_lock_init_recursive>
 8001560:	f7ff ff96 	bl	8001490 <__sfp_lock_release>
 8001564:	2208      	movs	r2, #8
 8001566:	4629      	mov	r1, r5
 8001568:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800156c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001570:	6025      	str	r5, [r4, #0]
 8001572:	61a5      	str	r5, [r4, #24]
 8001574:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001578:	f7ff ff24 	bl	80013c4 <memset>
 800157c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001580:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001584:	4620      	mov	r0, r4
 8001586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001588:	3468      	adds	r4, #104	; 0x68
 800158a:	e7d9      	b.n	8001540 <__sfp+0x1c>
 800158c:	2104      	movs	r1, #4
 800158e:	4638      	mov	r0, r7
 8001590:	f7ff ff62 	bl	8001458 <__sfmoreglue>
 8001594:	4604      	mov	r4, r0
 8001596:	6030      	str	r0, [r6, #0]
 8001598:	2800      	cmp	r0, #0
 800159a:	d1d5      	bne.n	8001548 <__sfp+0x24>
 800159c:	f7ff ff78 	bl	8001490 <__sfp_lock_release>
 80015a0:	230c      	movs	r3, #12
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	e7ee      	b.n	8001584 <__sfp+0x60>
 80015a6:	bf00      	nop
 80015a8:	080027d4 	.word	0x080027d4
 80015ac:	ffff0001 	.word	0xffff0001

080015b0 <_fwalk>:
 80015b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015b4:	460f      	mov	r7, r1
 80015b6:	2600      	movs	r6, #0
 80015b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80015bc:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80015c0:	f1b8 0801 	subs.w	r8, r8, #1
 80015c4:	d505      	bpl.n	80015d2 <_fwalk+0x22>
 80015c6:	6824      	ldr	r4, [r4, #0]
 80015c8:	2c00      	cmp	r4, #0
 80015ca:	d1f7      	bne.n	80015bc <_fwalk+0xc>
 80015cc:	4630      	mov	r0, r6
 80015ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015d2:	89ab      	ldrh	r3, [r5, #12]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d906      	bls.n	80015e6 <_fwalk+0x36>
 80015d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80015dc:	3301      	adds	r3, #1
 80015de:	d002      	beq.n	80015e6 <_fwalk+0x36>
 80015e0:	4628      	mov	r0, r5
 80015e2:	47b8      	blx	r7
 80015e4:	4306      	orrs	r6, r0
 80015e6:	3568      	adds	r5, #104	; 0x68
 80015e8:	e7ea      	b.n	80015c0 <_fwalk+0x10>

080015ea <_fwalk_reent>:
 80015ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015ee:	4606      	mov	r6, r0
 80015f0:	4688      	mov	r8, r1
 80015f2:	2700      	movs	r7, #0
 80015f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80015f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80015fc:	f1b9 0901 	subs.w	r9, r9, #1
 8001600:	d505      	bpl.n	800160e <_fwalk_reent+0x24>
 8001602:	6824      	ldr	r4, [r4, #0]
 8001604:	2c00      	cmp	r4, #0
 8001606:	d1f7      	bne.n	80015f8 <_fwalk_reent+0xe>
 8001608:	4638      	mov	r0, r7
 800160a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800160e:	89ab      	ldrh	r3, [r5, #12]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d907      	bls.n	8001624 <_fwalk_reent+0x3a>
 8001614:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001618:	3301      	adds	r3, #1
 800161a:	d003      	beq.n	8001624 <_fwalk_reent+0x3a>
 800161c:	4629      	mov	r1, r5
 800161e:	4630      	mov	r0, r6
 8001620:	47c0      	blx	r8
 8001622:	4307      	orrs	r7, r0
 8001624:	3568      	adds	r5, #104	; 0x68
 8001626:	e7e9      	b.n	80015fc <_fwalk_reent+0x12>

08001628 <__retarget_lock_init_recursive>:
 8001628:	4770      	bx	lr

0800162a <__retarget_lock_acquire_recursive>:
 800162a:	4770      	bx	lr

0800162c <__retarget_lock_release_recursive>:
 800162c:	4770      	bx	lr
	...

08001630 <_malloc_r>:
 8001630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001632:	1ccd      	adds	r5, r1, #3
 8001634:	f025 0503 	bic.w	r5, r5, #3
 8001638:	3508      	adds	r5, #8
 800163a:	2d0c      	cmp	r5, #12
 800163c:	bf38      	it	cc
 800163e:	250c      	movcc	r5, #12
 8001640:	2d00      	cmp	r5, #0
 8001642:	4606      	mov	r6, r0
 8001644:	db01      	blt.n	800164a <_malloc_r+0x1a>
 8001646:	42a9      	cmp	r1, r5
 8001648:	d903      	bls.n	8001652 <_malloc_r+0x22>
 800164a:	230c      	movs	r3, #12
 800164c:	6033      	str	r3, [r6, #0]
 800164e:	2000      	movs	r0, #0
 8001650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001652:	f000 ffdf 	bl	8002614 <__malloc_lock>
 8001656:	4921      	ldr	r1, [pc, #132]	; (80016dc <_malloc_r+0xac>)
 8001658:	680a      	ldr	r2, [r1, #0]
 800165a:	4614      	mov	r4, r2
 800165c:	b99c      	cbnz	r4, 8001686 <_malloc_r+0x56>
 800165e:	4f20      	ldr	r7, [pc, #128]	; (80016e0 <_malloc_r+0xb0>)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	b923      	cbnz	r3, 800166e <_malloc_r+0x3e>
 8001664:	4621      	mov	r1, r4
 8001666:	4630      	mov	r0, r6
 8001668:	f000 fbe8 	bl	8001e3c <_sbrk_r>
 800166c:	6038      	str	r0, [r7, #0]
 800166e:	4629      	mov	r1, r5
 8001670:	4630      	mov	r0, r6
 8001672:	f000 fbe3 	bl	8001e3c <_sbrk_r>
 8001676:	1c43      	adds	r3, r0, #1
 8001678:	d123      	bne.n	80016c2 <_malloc_r+0x92>
 800167a:	230c      	movs	r3, #12
 800167c:	4630      	mov	r0, r6
 800167e:	6033      	str	r3, [r6, #0]
 8001680:	f000 ffce 	bl	8002620 <__malloc_unlock>
 8001684:	e7e3      	b.n	800164e <_malloc_r+0x1e>
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	1b5b      	subs	r3, r3, r5
 800168a:	d417      	bmi.n	80016bc <_malloc_r+0x8c>
 800168c:	2b0b      	cmp	r3, #11
 800168e:	d903      	bls.n	8001698 <_malloc_r+0x68>
 8001690:	6023      	str	r3, [r4, #0]
 8001692:	441c      	add	r4, r3
 8001694:	6025      	str	r5, [r4, #0]
 8001696:	e004      	b.n	80016a2 <_malloc_r+0x72>
 8001698:	6863      	ldr	r3, [r4, #4]
 800169a:	42a2      	cmp	r2, r4
 800169c:	bf0c      	ite	eq
 800169e:	600b      	streq	r3, [r1, #0]
 80016a0:	6053      	strne	r3, [r2, #4]
 80016a2:	4630      	mov	r0, r6
 80016a4:	f000 ffbc 	bl	8002620 <__malloc_unlock>
 80016a8:	f104 000b 	add.w	r0, r4, #11
 80016ac:	1d23      	adds	r3, r4, #4
 80016ae:	f020 0007 	bic.w	r0, r0, #7
 80016b2:	1ac2      	subs	r2, r0, r3
 80016b4:	d0cc      	beq.n	8001650 <_malloc_r+0x20>
 80016b6:	1a1b      	subs	r3, r3, r0
 80016b8:	50a3      	str	r3, [r4, r2]
 80016ba:	e7c9      	b.n	8001650 <_malloc_r+0x20>
 80016bc:	4622      	mov	r2, r4
 80016be:	6864      	ldr	r4, [r4, #4]
 80016c0:	e7cc      	b.n	800165c <_malloc_r+0x2c>
 80016c2:	1cc4      	adds	r4, r0, #3
 80016c4:	f024 0403 	bic.w	r4, r4, #3
 80016c8:	42a0      	cmp	r0, r4
 80016ca:	d0e3      	beq.n	8001694 <_malloc_r+0x64>
 80016cc:	1a21      	subs	r1, r4, r0
 80016ce:	4630      	mov	r0, r6
 80016d0:	f000 fbb4 	bl	8001e3c <_sbrk_r>
 80016d4:	3001      	adds	r0, #1
 80016d6:	d1dd      	bne.n	8001694 <_malloc_r+0x64>
 80016d8:	e7cf      	b.n	800167a <_malloc_r+0x4a>
 80016da:	bf00      	nop
 80016dc:	20000090 	.word	0x20000090
 80016e0:	20000094 	.word	0x20000094

080016e4 <__svfiscanf_r>:
 80016e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e8:	461d      	mov	r5, r3
 80016ea:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80016ec:	4606      	mov	r6, r0
 80016ee:	07df      	lsls	r7, r3, #31
 80016f0:	460c      	mov	r4, r1
 80016f2:	4692      	mov	sl, r2
 80016f4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80016f8:	d405      	bmi.n	8001706 <__svfiscanf_r+0x22>
 80016fa:	898b      	ldrh	r3, [r1, #12]
 80016fc:	0598      	lsls	r0, r3, #22
 80016fe:	d402      	bmi.n	8001706 <__svfiscanf_r+0x22>
 8001700:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8001702:	f7ff ff92 	bl	800162a <__retarget_lock_acquire_recursive>
 8001706:	2300      	movs	r3, #0
 8001708:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800170c:	4bae      	ldr	r3, [pc, #696]	; (80019c8 <__svfiscanf_r+0x2e4>)
 800170e:	f10d 0804 	add.w	r8, sp, #4
 8001712:	93a0      	str	r3, [sp, #640]	; 0x280
 8001714:	4bad      	ldr	r3, [pc, #692]	; (80019cc <__svfiscanf_r+0x2e8>)
 8001716:	4fae      	ldr	r7, [pc, #696]	; (80019d0 <__svfiscanf_r+0x2ec>)
 8001718:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 80019d4 <__svfiscanf_r+0x2f0>
 800171c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8001720:	93a1      	str	r3, [sp, #644]	; 0x284
 8001722:	9500      	str	r5, [sp, #0]
 8001724:	f89a b000 	ldrb.w	fp, [sl]
 8001728:	f1bb 0f00 	cmp.w	fp, #0
 800172c:	f000 8170 	beq.w	8001a10 <__svfiscanf_r+0x32c>
 8001730:	f81b 3007 	ldrb.w	r3, [fp, r7]
 8001734:	f10a 0501 	add.w	r5, sl, #1
 8001738:	f013 0308 	ands.w	r3, r3, #8
 800173c:	d019      	beq.n	8001772 <__svfiscanf_r+0x8e>
 800173e:	6863      	ldr	r3, [r4, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	dd0f      	ble.n	8001764 <__svfiscanf_r+0x80>
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	781a      	ldrb	r2, [r3, #0]
 8001748:	5cba      	ldrb	r2, [r7, r2]
 800174a:	0711      	lsls	r1, r2, #28
 800174c:	d401      	bmi.n	8001752 <__svfiscanf_r+0x6e>
 800174e:	46aa      	mov	sl, r5
 8001750:	e7e8      	b.n	8001724 <__svfiscanf_r+0x40>
 8001752:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8001754:	3301      	adds	r3, #1
 8001756:	3201      	adds	r2, #1
 8001758:	9245      	str	r2, [sp, #276]	; 0x114
 800175a:	6862      	ldr	r2, [r4, #4]
 800175c:	6023      	str	r3, [r4, #0]
 800175e:	3a01      	subs	r2, #1
 8001760:	6062      	str	r2, [r4, #4]
 8001762:	e7ec      	b.n	800173e <__svfiscanf_r+0x5a>
 8001764:	4621      	mov	r1, r4
 8001766:	4630      	mov	r0, r6
 8001768:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800176a:	4798      	blx	r3
 800176c:	2800      	cmp	r0, #0
 800176e:	d0e9      	beq.n	8001744 <__svfiscanf_r+0x60>
 8001770:	e7ed      	b.n	800174e <__svfiscanf_r+0x6a>
 8001772:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8001776:	f040 8086 	bne.w	8001886 <__svfiscanf_r+0x1a2>
 800177a:	9341      	str	r3, [sp, #260]	; 0x104
 800177c:	9343      	str	r3, [sp, #268]	; 0x10c
 800177e:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8001782:	220a      	movs	r2, #10
 8001784:	2b2a      	cmp	r3, #42	; 0x2a
 8001786:	bf02      	ittt	eq
 8001788:	2310      	moveq	r3, #16
 800178a:	f10a 0502 	addeq.w	r5, sl, #2
 800178e:	9341      	streq	r3, [sp, #260]	; 0x104
 8001790:	46aa      	mov	sl, r5
 8001792:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8001796:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800179a:	2b09      	cmp	r3, #9
 800179c:	d91e      	bls.n	80017dc <__svfiscanf_r+0xf8>
 800179e:	2203      	movs	r2, #3
 80017a0:	488c      	ldr	r0, [pc, #560]	; (80019d4 <__svfiscanf_r+0x2f0>)
 80017a2:	f000 ff1b 	bl	80025dc <memchr>
 80017a6:	b140      	cbz	r0, 80017ba <__svfiscanf_r+0xd6>
 80017a8:	2301      	movs	r3, #1
 80017aa:	4655      	mov	r5, sl
 80017ac:	eba0 0009 	sub.w	r0, r0, r9
 80017b0:	fa03 f000 	lsl.w	r0, r3, r0
 80017b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80017b6:	4318      	orrs	r0, r3
 80017b8:	9041      	str	r0, [sp, #260]	; 0x104
 80017ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80017be:	2b78      	cmp	r3, #120	; 0x78
 80017c0:	d807      	bhi.n	80017d2 <__svfiscanf_r+0xee>
 80017c2:	2b57      	cmp	r3, #87	; 0x57
 80017c4:	d811      	bhi.n	80017ea <__svfiscanf_r+0x106>
 80017c6:	2b25      	cmp	r3, #37	; 0x25
 80017c8:	d05d      	beq.n	8001886 <__svfiscanf_r+0x1a2>
 80017ca:	d857      	bhi.n	800187c <__svfiscanf_r+0x198>
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80d6 	beq.w	800197e <__svfiscanf_r+0x29a>
 80017d2:	2303      	movs	r3, #3
 80017d4:	9347      	str	r3, [sp, #284]	; 0x11c
 80017d6:	230a      	movs	r3, #10
 80017d8:	9342      	str	r3, [sp, #264]	; 0x108
 80017da:	e08b      	b.n	80018f4 <__svfiscanf_r+0x210>
 80017dc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80017de:	4655      	mov	r5, sl
 80017e0:	fb02 1303 	mla	r3, r2, r3, r1
 80017e4:	3b30      	subs	r3, #48	; 0x30
 80017e6:	9343      	str	r3, [sp, #268]	; 0x10c
 80017e8:	e7d2      	b.n	8001790 <__svfiscanf_r+0xac>
 80017ea:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80017ee:	2a20      	cmp	r2, #32
 80017f0:	d8ef      	bhi.n	80017d2 <__svfiscanf_r+0xee>
 80017f2:	a101      	add	r1, pc, #4	; (adr r1, 80017f8 <__svfiscanf_r+0x114>)
 80017f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80017f8:	080018df 	.word	0x080018df
 80017fc:	080017d3 	.word	0x080017d3
 8001800:	080017d3 	.word	0x080017d3
 8001804:	0800193d 	.word	0x0800193d
 8001808:	080017d3 	.word	0x080017d3
 800180c:	080017d3 	.word	0x080017d3
 8001810:	080017d3 	.word	0x080017d3
 8001814:	080017d3 	.word	0x080017d3
 8001818:	080017d3 	.word	0x080017d3
 800181c:	080017d3 	.word	0x080017d3
 8001820:	080017d3 	.word	0x080017d3
 8001824:	08001953 	.word	0x08001953
 8001828:	08001929 	.word	0x08001929
 800182c:	08001883 	.word	0x08001883
 8001830:	08001883 	.word	0x08001883
 8001834:	08001883 	.word	0x08001883
 8001838:	080017d3 	.word	0x080017d3
 800183c:	0800192d 	.word	0x0800192d
 8001840:	080017d3 	.word	0x080017d3
 8001844:	080017d3 	.word	0x080017d3
 8001848:	080017d3 	.word	0x080017d3
 800184c:	080017d3 	.word	0x080017d3
 8001850:	08001963 	.word	0x08001963
 8001854:	08001935 	.word	0x08001935
 8001858:	080018d7 	.word	0x080018d7
 800185c:	080017d3 	.word	0x080017d3
 8001860:	080017d3 	.word	0x080017d3
 8001864:	0800195f 	.word	0x0800195f
 8001868:	080017d3 	.word	0x080017d3
 800186c:	08001929 	.word	0x08001929
 8001870:	080017d3 	.word	0x080017d3
 8001874:	080017d3 	.word	0x080017d3
 8001878:	080018df 	.word	0x080018df
 800187c:	3b45      	subs	r3, #69	; 0x45
 800187e:	2b02      	cmp	r3, #2
 8001880:	d8a7      	bhi.n	80017d2 <__svfiscanf_r+0xee>
 8001882:	2305      	movs	r3, #5
 8001884:	e035      	b.n	80018f2 <__svfiscanf_r+0x20e>
 8001886:	6863      	ldr	r3, [r4, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	dd0d      	ble.n	80018a8 <__svfiscanf_r+0x1c4>
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	781a      	ldrb	r2, [r3, #0]
 8001890:	455a      	cmp	r2, fp
 8001892:	f040 80bd 	bne.w	8001a10 <__svfiscanf_r+0x32c>
 8001896:	3301      	adds	r3, #1
 8001898:	6862      	ldr	r2, [r4, #4]
 800189a:	6023      	str	r3, [r4, #0]
 800189c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800189e:	3a01      	subs	r2, #1
 80018a0:	3301      	adds	r3, #1
 80018a2:	6062      	str	r2, [r4, #4]
 80018a4:	9345      	str	r3, [sp, #276]	; 0x114
 80018a6:	e752      	b.n	800174e <__svfiscanf_r+0x6a>
 80018a8:	4621      	mov	r1, r4
 80018aa:	4630      	mov	r0, r6
 80018ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80018ae:	4798      	blx	r3
 80018b0:	2800      	cmp	r0, #0
 80018b2:	d0eb      	beq.n	800188c <__svfiscanf_r+0x1a8>
 80018b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80018b6:	07da      	lsls	r2, r3, #31
 80018b8:	f140 80a2 	bpl.w	8001a00 <__svfiscanf_r+0x31c>
 80018bc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80018be:	2800      	cmp	r0, #0
 80018c0:	d066      	beq.n	8001990 <__svfiscanf_r+0x2ac>
 80018c2:	89a3      	ldrh	r3, [r4, #12]
 80018c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80018c8:	bf18      	it	ne
 80018ca:	f04f 30ff 	movne.w	r0, #4294967295
 80018ce:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80018d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80018d8:	f042 0220 	orr.w	r2, r2, #32
 80018dc:	9241      	str	r2, [sp, #260]	; 0x104
 80018de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80018e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e4:	9241      	str	r2, [sp, #260]	; 0x104
 80018e6:	2210      	movs	r2, #16
 80018e8:	2b6f      	cmp	r3, #111	; 0x6f
 80018ea:	bf34      	ite	cc
 80018ec:	2303      	movcc	r3, #3
 80018ee:	2304      	movcs	r3, #4
 80018f0:	9242      	str	r2, [sp, #264]	; 0x108
 80018f2:	9347      	str	r3, [sp, #284]	; 0x11c
 80018f4:	6863      	ldr	r3, [r4, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	dd4d      	ble.n	8001996 <__svfiscanf_r+0x2b2>
 80018fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80018fc:	065b      	lsls	r3, r3, #25
 80018fe:	d404      	bmi.n	800190a <__svfiscanf_r+0x226>
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	781a      	ldrb	r2, [r3, #0]
 8001904:	5cba      	ldrb	r2, [r7, r2]
 8001906:	0710      	lsls	r0, r2, #28
 8001908:	d44c      	bmi.n	80019a4 <__svfiscanf_r+0x2c0>
 800190a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800190c:	2b02      	cmp	r3, #2
 800190e:	dc63      	bgt.n	80019d8 <__svfiscanf_r+0x2f4>
 8001910:	466b      	mov	r3, sp
 8001912:	4622      	mov	r2, r4
 8001914:	4630      	mov	r0, r6
 8001916:	a941      	add	r1, sp, #260	; 0x104
 8001918:	f000 f8b0 	bl	8001a7c <_scanf_chars>
 800191c:	2801      	cmp	r0, #1
 800191e:	d077      	beq.n	8001a10 <__svfiscanf_r+0x32c>
 8001920:	2802      	cmp	r0, #2
 8001922:	f47f af14 	bne.w	800174e <__svfiscanf_r+0x6a>
 8001926:	e7c5      	b.n	80018b4 <__svfiscanf_r+0x1d0>
 8001928:	220a      	movs	r2, #10
 800192a:	e7dd      	b.n	80018e8 <__svfiscanf_r+0x204>
 800192c:	2300      	movs	r3, #0
 800192e:	9342      	str	r3, [sp, #264]	; 0x108
 8001930:	2303      	movs	r3, #3
 8001932:	e7de      	b.n	80018f2 <__svfiscanf_r+0x20e>
 8001934:	2308      	movs	r3, #8
 8001936:	9342      	str	r3, [sp, #264]	; 0x108
 8001938:	2304      	movs	r3, #4
 800193a:	e7da      	b.n	80018f2 <__svfiscanf_r+0x20e>
 800193c:	4629      	mov	r1, r5
 800193e:	4640      	mov	r0, r8
 8001940:	f000 fa8c 	bl	8001e5c <__sccl>
 8001944:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001946:	4605      	mov	r5, r0
 8001948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800194c:	9341      	str	r3, [sp, #260]	; 0x104
 800194e:	2301      	movs	r3, #1
 8001950:	e7cf      	b.n	80018f2 <__svfiscanf_r+0x20e>
 8001952:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001958:	9341      	str	r3, [sp, #260]	; 0x104
 800195a:	2300      	movs	r3, #0
 800195c:	e7c9      	b.n	80018f2 <__svfiscanf_r+0x20e>
 800195e:	2302      	movs	r3, #2
 8001960:	e7c7      	b.n	80018f2 <__svfiscanf_r+0x20e>
 8001962:	9841      	ldr	r0, [sp, #260]	; 0x104
 8001964:	06c3      	lsls	r3, r0, #27
 8001966:	f53f aef2 	bmi.w	800174e <__svfiscanf_r+0x6a>
 800196a:	9b00      	ldr	r3, [sp, #0]
 800196c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800196e:	1d19      	adds	r1, r3, #4
 8001970:	9100      	str	r1, [sp, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	07c0      	lsls	r0, r0, #31
 8001976:	bf4c      	ite	mi
 8001978:	801a      	strhmi	r2, [r3, #0]
 800197a:	601a      	strpl	r2, [r3, #0]
 800197c:	e6e7      	b.n	800174e <__svfiscanf_r+0x6a>
 800197e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001980:	07d8      	lsls	r0, r3, #31
 8001982:	d405      	bmi.n	8001990 <__svfiscanf_r+0x2ac>
 8001984:	89a3      	ldrh	r3, [r4, #12]
 8001986:	0599      	lsls	r1, r3, #22
 8001988:	d402      	bmi.n	8001990 <__svfiscanf_r+0x2ac>
 800198a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800198c:	f7ff fe4e 	bl	800162c <__retarget_lock_release_recursive>
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	e79b      	b.n	80018ce <__svfiscanf_r+0x1ea>
 8001996:	4621      	mov	r1, r4
 8001998:	4630      	mov	r0, r6
 800199a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800199c:	4798      	blx	r3
 800199e:	2800      	cmp	r0, #0
 80019a0:	d0ab      	beq.n	80018fa <__svfiscanf_r+0x216>
 80019a2:	e787      	b.n	80018b4 <__svfiscanf_r+0x1d0>
 80019a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80019a6:	3201      	adds	r2, #1
 80019a8:	9245      	str	r2, [sp, #276]	; 0x114
 80019aa:	6862      	ldr	r2, [r4, #4]
 80019ac:	3a01      	subs	r2, #1
 80019ae:	2a00      	cmp	r2, #0
 80019b0:	6062      	str	r2, [r4, #4]
 80019b2:	dd02      	ble.n	80019ba <__svfiscanf_r+0x2d6>
 80019b4:	3301      	adds	r3, #1
 80019b6:	6023      	str	r3, [r4, #0]
 80019b8:	e7a2      	b.n	8001900 <__svfiscanf_r+0x21c>
 80019ba:	4621      	mov	r1, r4
 80019bc:	4630      	mov	r0, r6
 80019be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80019c0:	4798      	blx	r3
 80019c2:	2800      	cmp	r0, #0
 80019c4:	d09c      	beq.n	8001900 <__svfiscanf_r+0x21c>
 80019c6:	e775      	b.n	80018b4 <__svfiscanf_r+0x1d0>
 80019c8:	080021d5 	.word	0x080021d5
 80019cc:	08001d25 	.word	0x08001d25
 80019d0:	08002858 	.word	0x08002858
 80019d4:	08002838 	.word	0x08002838
 80019d8:	2b04      	cmp	r3, #4
 80019da:	dc06      	bgt.n	80019ea <__svfiscanf_r+0x306>
 80019dc:	466b      	mov	r3, sp
 80019de:	4622      	mov	r2, r4
 80019e0:	4630      	mov	r0, r6
 80019e2:	a941      	add	r1, sp, #260	; 0x104
 80019e4:	f000 f8a2 	bl	8001b2c <_scanf_i>
 80019e8:	e798      	b.n	800191c <__svfiscanf_r+0x238>
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <__svfiscanf_r+0x344>)
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f43f aeae 	beq.w	800174e <__svfiscanf_r+0x6a>
 80019f2:	466b      	mov	r3, sp
 80019f4:	4622      	mov	r2, r4
 80019f6:	4630      	mov	r0, r6
 80019f8:	a941      	add	r1, sp, #260	; 0x104
 80019fa:	f3af 8000 	nop.w
 80019fe:	e78d      	b.n	800191c <__svfiscanf_r+0x238>
 8001a00:	89a3      	ldrh	r3, [r4, #12]
 8001a02:	0599      	lsls	r1, r3, #22
 8001a04:	f53f af5a 	bmi.w	80018bc <__svfiscanf_r+0x1d8>
 8001a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a0a:	f7ff fe0f 	bl	800162c <__retarget_lock_release_recursive>
 8001a0e:	e755      	b.n	80018bc <__svfiscanf_r+0x1d8>
 8001a10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a12:	07da      	lsls	r2, r3, #31
 8001a14:	d405      	bmi.n	8001a22 <__svfiscanf_r+0x33e>
 8001a16:	89a3      	ldrh	r3, [r4, #12]
 8001a18:	059b      	lsls	r3, r3, #22
 8001a1a:	d402      	bmi.n	8001a22 <__svfiscanf_r+0x33e>
 8001a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a1e:	f7ff fe05 	bl	800162c <__retarget_lock_release_recursive>
 8001a22:	9844      	ldr	r0, [sp, #272]	; 0x110
 8001a24:	e753      	b.n	80018ce <__svfiscanf_r+0x1ea>
 8001a26:	bf00      	nop
 8001a28:	00000000 	.word	0x00000000

08001a2c <_vfiscanf_r>:
 8001a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a30:	460c      	mov	r4, r1
 8001a32:	4616      	mov	r6, r2
 8001a34:	461f      	mov	r7, r3
 8001a36:	4605      	mov	r5, r0
 8001a38:	b118      	cbz	r0, 8001a42 <_vfiscanf_r+0x16>
 8001a3a:	6983      	ldr	r3, [r0, #24]
 8001a3c:	b90b      	cbnz	r3, 8001a42 <_vfiscanf_r+0x16>
 8001a3e:	f7ff fd39 	bl	80014b4 <__sinit>
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <_vfiscanf_r+0x44>)
 8001a44:	429c      	cmp	r4, r3
 8001a46:	d108      	bne.n	8001a5a <_vfiscanf_r+0x2e>
 8001a48:	686c      	ldr	r4, [r5, #4]
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	4632      	mov	r2, r6
 8001a4e:	4621      	mov	r1, r4
 8001a50:	4628      	mov	r0, r5
 8001a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a56:	f7ff be45 	b.w	80016e4 <__svfiscanf_r>
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <_vfiscanf_r+0x48>)
 8001a5c:	429c      	cmp	r4, r3
 8001a5e:	d101      	bne.n	8001a64 <_vfiscanf_r+0x38>
 8001a60:	68ac      	ldr	r4, [r5, #8]
 8001a62:	e7f2      	b.n	8001a4a <_vfiscanf_r+0x1e>
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <_vfiscanf_r+0x4c>)
 8001a66:	429c      	cmp	r4, r3
 8001a68:	bf08      	it	eq
 8001a6a:	68ec      	ldreq	r4, [r5, #12]
 8001a6c:	e7ed      	b.n	8001a4a <_vfiscanf_r+0x1e>
 8001a6e:	bf00      	nop
 8001a70:	080027f8 	.word	0x080027f8
 8001a74:	08002818 	.word	0x08002818
 8001a78:	080027d8 	.word	0x080027d8

08001a7c <_scanf_chars>:
 8001a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a80:	4615      	mov	r5, r2
 8001a82:	688a      	ldr	r2, [r1, #8]
 8001a84:	4680      	mov	r8, r0
 8001a86:	460c      	mov	r4, r1
 8001a88:	b932      	cbnz	r2, 8001a98 <_scanf_chars+0x1c>
 8001a8a:	698a      	ldr	r2, [r1, #24]
 8001a8c:	2a00      	cmp	r2, #0
 8001a8e:	bf0c      	ite	eq
 8001a90:	2201      	moveq	r2, #1
 8001a92:	f04f 32ff 	movne.w	r2, #4294967295
 8001a96:	608a      	str	r2, [r1, #8]
 8001a98:	2700      	movs	r7, #0
 8001a9a:	6822      	ldr	r2, [r4, #0]
 8001a9c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8001b28 <_scanf_chars+0xac>
 8001aa0:	06d1      	lsls	r1, r2, #27
 8001aa2:	bf5f      	itttt	pl
 8001aa4:	681a      	ldrpl	r2, [r3, #0]
 8001aa6:	1d11      	addpl	r1, r2, #4
 8001aa8:	6019      	strpl	r1, [r3, #0]
 8001aaa:	6816      	ldrpl	r6, [r2, #0]
 8001aac:	69a0      	ldr	r0, [r4, #24]
 8001aae:	b188      	cbz	r0, 8001ad4 <_scanf_chars+0x58>
 8001ab0:	2801      	cmp	r0, #1
 8001ab2:	d107      	bne.n	8001ac4 <_scanf_chars+0x48>
 8001ab4:	682b      	ldr	r3, [r5, #0]
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	6963      	ldr	r3, [r4, #20]
 8001aba:	5c9b      	ldrb	r3, [r3, r2]
 8001abc:	b953      	cbnz	r3, 8001ad4 <_scanf_chars+0x58>
 8001abe:	bb27      	cbnz	r7, 8001b0a <_scanf_chars+0x8e>
 8001ac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ac4:	2802      	cmp	r0, #2
 8001ac6:	d120      	bne.n	8001b0a <_scanf_chars+0x8e>
 8001ac8:	682b      	ldr	r3, [r5, #0]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8001ad0:	071b      	lsls	r3, r3, #28
 8001ad2:	d41a      	bmi.n	8001b0a <_scanf_chars+0x8e>
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	3701      	adds	r7, #1
 8001ad8:	06da      	lsls	r2, r3, #27
 8001ada:	bf5e      	ittt	pl
 8001adc:	682b      	ldrpl	r3, [r5, #0]
 8001ade:	781b      	ldrbpl	r3, [r3, #0]
 8001ae0:	f806 3b01 	strbpl.w	r3, [r6], #1
 8001ae4:	682a      	ldr	r2, [r5, #0]
 8001ae6:	686b      	ldr	r3, [r5, #4]
 8001ae8:	3201      	adds	r2, #1
 8001aea:	602a      	str	r2, [r5, #0]
 8001aec:	68a2      	ldr	r2, [r4, #8]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	3a01      	subs	r2, #1
 8001af2:	606b      	str	r3, [r5, #4]
 8001af4:	60a2      	str	r2, [r4, #8]
 8001af6:	b142      	cbz	r2, 8001b0a <_scanf_chars+0x8e>
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	dcd7      	bgt.n	8001aac <_scanf_chars+0x30>
 8001afc:	4629      	mov	r1, r5
 8001afe:	4640      	mov	r0, r8
 8001b00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8001b04:	4798      	blx	r3
 8001b06:	2800      	cmp	r0, #0
 8001b08:	d0d0      	beq.n	8001aac <_scanf_chars+0x30>
 8001b0a:	6823      	ldr	r3, [r4, #0]
 8001b0c:	f013 0310 	ands.w	r3, r3, #16
 8001b10:	d105      	bne.n	8001b1e <_scanf_chars+0xa2>
 8001b12:	68e2      	ldr	r2, [r4, #12]
 8001b14:	3201      	adds	r2, #1
 8001b16:	60e2      	str	r2, [r4, #12]
 8001b18:	69a2      	ldr	r2, [r4, #24]
 8001b1a:	b102      	cbz	r2, 8001b1e <_scanf_chars+0xa2>
 8001b1c:	7033      	strb	r3, [r6, #0]
 8001b1e:	6923      	ldr	r3, [r4, #16]
 8001b20:	2000      	movs	r0, #0
 8001b22:	441f      	add	r7, r3
 8001b24:	6127      	str	r7, [r4, #16]
 8001b26:	e7cb      	b.n	8001ac0 <_scanf_chars+0x44>
 8001b28:	08002858 	.word	0x08002858

08001b2c <_scanf_i>:
 8001b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b30:	460c      	mov	r4, r1
 8001b32:	4698      	mov	r8, r3
 8001b34:	4b72      	ldr	r3, [pc, #456]	; (8001d00 <_scanf_i+0x1d4>)
 8001b36:	b087      	sub	sp, #28
 8001b38:	4682      	mov	sl, r0
 8001b3a:	4616      	mov	r6, r2
 8001b3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b40:	ab03      	add	r3, sp, #12
 8001b42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b46:	4b6f      	ldr	r3, [pc, #444]	; (8001d04 <_scanf_i+0x1d8>)
 8001b48:	69a1      	ldr	r1, [r4, #24]
 8001b4a:	4a6f      	ldr	r2, [pc, #444]	; (8001d08 <_scanf_i+0x1dc>)
 8001b4c:	4627      	mov	r7, r4
 8001b4e:	2903      	cmp	r1, #3
 8001b50:	bf18      	it	ne
 8001b52:	461a      	movne	r2, r3
 8001b54:	68a3      	ldr	r3, [r4, #8]
 8001b56:	9201      	str	r2, [sp, #4]
 8001b58:	1e5a      	subs	r2, r3, #1
 8001b5a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8001b5e:	bf81      	itttt	hi
 8001b60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8001b64:	eb03 0905 	addhi.w	r9, r3, r5
 8001b68:	f240 135d 	movwhi	r3, #349	; 0x15d
 8001b6c:	60a3      	strhi	r3, [r4, #8]
 8001b6e:	f857 3b1c 	ldr.w	r3, [r7], #28
 8001b72:	bf98      	it	ls
 8001b74:	f04f 0900 	movls.w	r9, #0
 8001b78:	463d      	mov	r5, r7
 8001b7a:	f04f 0b00 	mov.w	fp, #0
 8001b7e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8001b82:	6023      	str	r3, [r4, #0]
 8001b84:	6831      	ldr	r1, [r6, #0]
 8001b86:	ab03      	add	r3, sp, #12
 8001b88:	2202      	movs	r2, #2
 8001b8a:	7809      	ldrb	r1, [r1, #0]
 8001b8c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8001b90:	f000 fd24 	bl	80025dc <memchr>
 8001b94:	b328      	cbz	r0, 8001be2 <_scanf_i+0xb6>
 8001b96:	f1bb 0f01 	cmp.w	fp, #1
 8001b9a:	d159      	bne.n	8001c50 <_scanf_i+0x124>
 8001b9c:	6862      	ldr	r2, [r4, #4]
 8001b9e:	b92a      	cbnz	r2, 8001bac <_scanf_i+0x80>
 8001ba0:	2308      	movs	r3, #8
 8001ba2:	6822      	ldr	r2, [r4, #0]
 8001ba4:	6063      	str	r3, [r4, #4]
 8001ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001baa:	6022      	str	r2, [r4, #0]
 8001bac:	6822      	ldr	r2, [r4, #0]
 8001bae:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8001bb2:	6022      	str	r2, [r4, #0]
 8001bb4:	68a2      	ldr	r2, [r4, #8]
 8001bb6:	1e51      	subs	r1, r2, #1
 8001bb8:	60a1      	str	r1, [r4, #8]
 8001bba:	b192      	cbz	r2, 8001be2 <_scanf_i+0xb6>
 8001bbc:	6832      	ldr	r2, [r6, #0]
 8001bbe:	1c51      	adds	r1, r2, #1
 8001bc0:	6031      	str	r1, [r6, #0]
 8001bc2:	7812      	ldrb	r2, [r2, #0]
 8001bc4:	f805 2b01 	strb.w	r2, [r5], #1
 8001bc8:	6872      	ldr	r2, [r6, #4]
 8001bca:	3a01      	subs	r2, #1
 8001bcc:	2a00      	cmp	r2, #0
 8001bce:	6072      	str	r2, [r6, #4]
 8001bd0:	dc07      	bgt.n	8001be2 <_scanf_i+0xb6>
 8001bd2:	4631      	mov	r1, r6
 8001bd4:	4650      	mov	r0, sl
 8001bd6:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8001bda:	4790      	blx	r2
 8001bdc:	2800      	cmp	r0, #0
 8001bde:	f040 8085 	bne.w	8001cec <_scanf_i+0x1c0>
 8001be2:	f10b 0b01 	add.w	fp, fp, #1
 8001be6:	f1bb 0f03 	cmp.w	fp, #3
 8001bea:	d1cb      	bne.n	8001b84 <_scanf_i+0x58>
 8001bec:	6863      	ldr	r3, [r4, #4]
 8001bee:	b90b      	cbnz	r3, 8001bf4 <_scanf_i+0xc8>
 8001bf0:	230a      	movs	r3, #10
 8001bf2:	6063      	str	r3, [r4, #4]
 8001bf4:	6863      	ldr	r3, [r4, #4]
 8001bf6:	4945      	ldr	r1, [pc, #276]	; (8001d0c <_scanf_i+0x1e0>)
 8001bf8:	6960      	ldr	r0, [r4, #20]
 8001bfa:	1ac9      	subs	r1, r1, r3
 8001bfc:	f000 f92e 	bl	8001e5c <__sccl>
 8001c00:	f04f 0b00 	mov.w	fp, #0
 8001c04:	68a3      	ldr	r3, [r4, #8]
 8001c06:	6822      	ldr	r2, [r4, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d03d      	beq.n	8001c88 <_scanf_i+0x15c>
 8001c0c:	6831      	ldr	r1, [r6, #0]
 8001c0e:	6960      	ldr	r0, [r4, #20]
 8001c10:	f891 c000 	ldrb.w	ip, [r1]
 8001c14:	f810 000c 	ldrb.w	r0, [r0, ip]
 8001c18:	2800      	cmp	r0, #0
 8001c1a:	d035      	beq.n	8001c88 <_scanf_i+0x15c>
 8001c1c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8001c20:	d124      	bne.n	8001c6c <_scanf_i+0x140>
 8001c22:	0510      	lsls	r0, r2, #20
 8001c24:	d522      	bpl.n	8001c6c <_scanf_i+0x140>
 8001c26:	f10b 0b01 	add.w	fp, fp, #1
 8001c2a:	f1b9 0f00 	cmp.w	r9, #0
 8001c2e:	d003      	beq.n	8001c38 <_scanf_i+0x10c>
 8001c30:	3301      	adds	r3, #1
 8001c32:	f109 39ff 	add.w	r9, r9, #4294967295
 8001c36:	60a3      	str	r3, [r4, #8]
 8001c38:	6873      	ldr	r3, [r6, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	6073      	str	r3, [r6, #4]
 8001c40:	dd1b      	ble.n	8001c7a <_scanf_i+0x14e>
 8001c42:	6833      	ldr	r3, [r6, #0]
 8001c44:	3301      	adds	r3, #1
 8001c46:	6033      	str	r3, [r6, #0]
 8001c48:	68a3      	ldr	r3, [r4, #8]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	60a3      	str	r3, [r4, #8]
 8001c4e:	e7d9      	b.n	8001c04 <_scanf_i+0xd8>
 8001c50:	f1bb 0f02 	cmp.w	fp, #2
 8001c54:	d1ae      	bne.n	8001bb4 <_scanf_i+0x88>
 8001c56:	6822      	ldr	r2, [r4, #0]
 8001c58:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8001c5c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001c60:	d1bf      	bne.n	8001be2 <_scanf_i+0xb6>
 8001c62:	2310      	movs	r3, #16
 8001c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c68:	6063      	str	r3, [r4, #4]
 8001c6a:	e7a2      	b.n	8001bb2 <_scanf_i+0x86>
 8001c6c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8001c70:	6022      	str	r2, [r4, #0]
 8001c72:	780b      	ldrb	r3, [r1, #0]
 8001c74:	f805 3b01 	strb.w	r3, [r5], #1
 8001c78:	e7de      	b.n	8001c38 <_scanf_i+0x10c>
 8001c7a:	4631      	mov	r1, r6
 8001c7c:	4650      	mov	r0, sl
 8001c7e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8001c82:	4798      	blx	r3
 8001c84:	2800      	cmp	r0, #0
 8001c86:	d0df      	beq.n	8001c48 <_scanf_i+0x11c>
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	05d9      	lsls	r1, r3, #23
 8001c8c:	d50d      	bpl.n	8001caa <_scanf_i+0x17e>
 8001c8e:	42bd      	cmp	r5, r7
 8001c90:	d909      	bls.n	8001ca6 <_scanf_i+0x17a>
 8001c92:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8001c96:	4632      	mov	r2, r6
 8001c98:	4650      	mov	r0, sl
 8001c9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001c9e:	f105 39ff 	add.w	r9, r5, #4294967295
 8001ca2:	4798      	blx	r3
 8001ca4:	464d      	mov	r5, r9
 8001ca6:	42bd      	cmp	r5, r7
 8001ca8:	d028      	beq.n	8001cfc <_scanf_i+0x1d0>
 8001caa:	6822      	ldr	r2, [r4, #0]
 8001cac:	f012 0210 	ands.w	r2, r2, #16
 8001cb0:	d113      	bne.n	8001cda <_scanf_i+0x1ae>
 8001cb2:	702a      	strb	r2, [r5, #0]
 8001cb4:	4639      	mov	r1, r7
 8001cb6:	6863      	ldr	r3, [r4, #4]
 8001cb8:	4650      	mov	r0, sl
 8001cba:	9e01      	ldr	r6, [sp, #4]
 8001cbc:	47b0      	blx	r6
 8001cbe:	f8d8 3000 	ldr.w	r3, [r8]
 8001cc2:	6821      	ldr	r1, [r4, #0]
 8001cc4:	1d1a      	adds	r2, r3, #4
 8001cc6:	f8c8 2000 	str.w	r2, [r8]
 8001cca:	f011 0f20 	tst.w	r1, #32
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	d00f      	beq.n	8001cf2 <_scanf_i+0x1c6>
 8001cd2:	6018      	str	r0, [r3, #0]
 8001cd4:	68e3      	ldr	r3, [r4, #12]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	60e3      	str	r3, [r4, #12]
 8001cda:	2000      	movs	r0, #0
 8001cdc:	1bed      	subs	r5, r5, r7
 8001cde:	44ab      	add	fp, r5
 8001ce0:	6925      	ldr	r5, [r4, #16]
 8001ce2:	445d      	add	r5, fp
 8001ce4:	6125      	str	r5, [r4, #16]
 8001ce6:	b007      	add	sp, #28
 8001ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cec:	f04f 0b00 	mov.w	fp, #0
 8001cf0:	e7ca      	b.n	8001c88 <_scanf_i+0x15c>
 8001cf2:	07ca      	lsls	r2, r1, #31
 8001cf4:	bf4c      	ite	mi
 8001cf6:	8018      	strhmi	r0, [r3, #0]
 8001cf8:	6018      	strpl	r0, [r3, #0]
 8001cfa:	e7eb      	b.n	8001cd4 <_scanf_i+0x1a8>
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	e7f2      	b.n	8001ce6 <_scanf_i+0x1ba>
 8001d00:	080027a4 	.word	0x080027a4
 8001d04:	08002161 	.word	0x08002161
 8001d08:	08002065 	.word	0x08002065
 8001d0c:	08002855 	.word	0x08002855

08001d10 <lflush>:
 8001d10:	8983      	ldrh	r3, [r0, #12]
 8001d12:	f003 0309 	and.w	r3, r3, #9
 8001d16:	2b09      	cmp	r3, #9
 8001d18:	d101      	bne.n	8001d1e <lflush+0xe>
 8001d1a:	f000 bbd7 	b.w	80024cc <fflush>
 8001d1e:	2000      	movs	r0, #0
 8001d20:	4770      	bx	lr
	...

08001d24 <__srefill_r>:
 8001d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d26:	460c      	mov	r4, r1
 8001d28:	4605      	mov	r5, r0
 8001d2a:	b118      	cbz	r0, 8001d34 <__srefill_r+0x10>
 8001d2c:	6983      	ldr	r3, [r0, #24]
 8001d2e:	b90b      	cbnz	r3, 8001d34 <__srefill_r+0x10>
 8001d30:	f7ff fbc0 	bl	80014b4 <__sinit>
 8001d34:	4b3c      	ldr	r3, [pc, #240]	; (8001e28 <__srefill_r+0x104>)
 8001d36:	429c      	cmp	r4, r3
 8001d38:	d10a      	bne.n	8001d50 <__srefill_r+0x2c>
 8001d3a:	686c      	ldr	r4, [r5, #4]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	6063      	str	r3, [r4, #4]
 8001d40:	89a3      	ldrh	r3, [r4, #12]
 8001d42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d46:	069e      	lsls	r6, r3, #26
 8001d48:	d50c      	bpl.n	8001d64 <__srefill_r+0x40>
 8001d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4e:	e067      	b.n	8001e20 <__srefill_r+0xfc>
 8001d50:	4b36      	ldr	r3, [pc, #216]	; (8001e2c <__srefill_r+0x108>)
 8001d52:	429c      	cmp	r4, r3
 8001d54:	d101      	bne.n	8001d5a <__srefill_r+0x36>
 8001d56:	68ac      	ldr	r4, [r5, #8]
 8001d58:	e7f0      	b.n	8001d3c <__srefill_r+0x18>
 8001d5a:	4b35      	ldr	r3, [pc, #212]	; (8001e30 <__srefill_r+0x10c>)
 8001d5c:	429c      	cmp	r4, r3
 8001d5e:	bf08      	it	eq
 8001d60:	68ec      	ldreq	r4, [r5, #12]
 8001d62:	e7eb      	b.n	8001d3c <__srefill_r+0x18>
 8001d64:	0758      	lsls	r0, r3, #29
 8001d66:	d449      	bmi.n	8001dfc <__srefill_r+0xd8>
 8001d68:	06d9      	lsls	r1, r3, #27
 8001d6a:	d405      	bmi.n	8001d78 <__srefill_r+0x54>
 8001d6c:	2309      	movs	r3, #9
 8001d6e:	602b      	str	r3, [r5, #0]
 8001d70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001d74:	81a3      	strh	r3, [r4, #12]
 8001d76:	e7e8      	b.n	8001d4a <__srefill_r+0x26>
 8001d78:	071a      	lsls	r2, r3, #28
 8001d7a:	d50b      	bpl.n	8001d94 <__srefill_r+0x70>
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	4628      	mov	r0, r5
 8001d80:	f000 fb68 	bl	8002454 <_fflush_r>
 8001d84:	2800      	cmp	r0, #0
 8001d86:	d1e0      	bne.n	8001d4a <__srefill_r+0x26>
 8001d88:	89a3      	ldrh	r3, [r4, #12]
 8001d8a:	60a0      	str	r0, [r4, #8]
 8001d8c:	f023 0308 	bic.w	r3, r3, #8
 8001d90:	81a3      	strh	r3, [r4, #12]
 8001d92:	61a0      	str	r0, [r4, #24]
 8001d94:	89a3      	ldrh	r3, [r4, #12]
 8001d96:	f043 0304 	orr.w	r3, r3, #4
 8001d9a:	81a3      	strh	r3, [r4, #12]
 8001d9c:	6923      	ldr	r3, [r4, #16]
 8001d9e:	b91b      	cbnz	r3, 8001da8 <__srefill_r+0x84>
 8001da0:	4621      	mov	r1, r4
 8001da2:	4628      	mov	r0, r5
 8001da4:	f000 fbda 	bl	800255c <__smakebuf_r>
 8001da8:	89a6      	ldrh	r6, [r4, #12]
 8001daa:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8001dae:	07b3      	lsls	r3, r6, #30
 8001db0:	d00f      	beq.n	8001dd2 <__srefill_r+0xae>
 8001db2:	2301      	movs	r3, #1
 8001db4:	81a3      	strh	r3, [r4, #12]
 8001db6:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <__srefill_r+0x110>)
 8001db8:	491f      	ldr	r1, [pc, #124]	; (8001e38 <__srefill_r+0x114>)
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	f006 0609 	and.w	r6, r6, #9
 8001dc0:	f7ff fbf6 	bl	80015b0 <_fwalk>
 8001dc4:	2e09      	cmp	r6, #9
 8001dc6:	81a7      	strh	r7, [r4, #12]
 8001dc8:	d103      	bne.n	8001dd2 <__srefill_r+0xae>
 8001dca:	4621      	mov	r1, r4
 8001dcc:	4628      	mov	r0, r5
 8001dce:	f000 fabb 	bl	8002348 <__sflush_r>
 8001dd2:	6922      	ldr	r2, [r4, #16]
 8001dd4:	4628      	mov	r0, r5
 8001dd6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8001dd8:	6963      	ldr	r3, [r4, #20]
 8001dda:	6a21      	ldr	r1, [r4, #32]
 8001ddc:	6022      	str	r2, [r4, #0]
 8001dde:	47b0      	blx	r6
 8001de0:	2800      	cmp	r0, #0
 8001de2:	6060      	str	r0, [r4, #4]
 8001de4:	dc1d      	bgt.n	8001e22 <__srefill_r+0xfe>
 8001de6:	bf18      	it	ne
 8001de8:	2200      	movne	r2, #0
 8001dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dee:	bf16      	itet	ne
 8001df0:	6062      	strne	r2, [r4, #4]
 8001df2:	f043 0320 	orreq.w	r3, r3, #32
 8001df6:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8001dfa:	e7bb      	b.n	8001d74 <__srefill_r+0x50>
 8001dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001dfe:	2900      	cmp	r1, #0
 8001e00:	d0cc      	beq.n	8001d9c <__srefill_r+0x78>
 8001e02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e06:	4299      	cmp	r1, r3
 8001e08:	d002      	beq.n	8001e10 <__srefill_r+0xec>
 8001e0a:	4628      	mov	r0, r5
 8001e0c:	f000 fc0e 	bl	800262c <_free_r>
 8001e10:	2000      	movs	r0, #0
 8001e12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e14:	6360      	str	r0, [r4, #52]	; 0x34
 8001e16:	6063      	str	r3, [r4, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0bf      	beq.n	8001d9c <__srefill_r+0x78>
 8001e1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e1e:	6023      	str	r3, [r4, #0]
 8001e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e22:	2000      	movs	r0, #0
 8001e24:	e7fc      	b.n	8001e20 <__srefill_r+0xfc>
 8001e26:	bf00      	nop
 8001e28:	080027f8 	.word	0x080027f8
 8001e2c:	08002818 	.word	0x08002818
 8001e30:	080027d8 	.word	0x080027d8
 8001e34:	080027d4 	.word	0x080027d4
 8001e38:	08001d11 	.word	0x08001d11

08001e3c <_sbrk_r>:
 8001e3c:	b538      	push	{r3, r4, r5, lr}
 8001e3e:	2300      	movs	r3, #0
 8001e40:	4d05      	ldr	r5, [pc, #20]	; (8001e58 <_sbrk_r+0x1c>)
 8001e42:	4604      	mov	r4, r0
 8001e44:	4608      	mov	r0, r1
 8001e46:	602b      	str	r3, [r5, #0]
 8001e48:	f7fe fb58 	bl	80004fc <_sbrk>
 8001e4c:	1c43      	adds	r3, r0, #1
 8001e4e:	d102      	bne.n	8001e56 <_sbrk_r+0x1a>
 8001e50:	682b      	ldr	r3, [r5, #0]
 8001e52:	b103      	cbz	r3, 8001e56 <_sbrk_r+0x1a>
 8001e54:	6023      	str	r3, [r4, #0]
 8001e56:	bd38      	pop	{r3, r4, r5, pc}
 8001e58:	200000a8 	.word	0x200000a8

08001e5c <__sccl>:
 8001e5c:	b570      	push	{r4, r5, r6, lr}
 8001e5e:	780b      	ldrb	r3, [r1, #0]
 8001e60:	4604      	mov	r4, r0
 8001e62:	2b5e      	cmp	r3, #94	; 0x5e
 8001e64:	bf13      	iteet	ne
 8001e66:	2200      	movne	r2, #0
 8001e68:	2201      	moveq	r2, #1
 8001e6a:	784b      	ldrbeq	r3, [r1, #1]
 8001e6c:	1c48      	addne	r0, r1, #1
 8001e6e:	bf08      	it	eq
 8001e70:	1c88      	addeq	r0, r1, #2
 8001e72:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8001e76:	1e61      	subs	r1, r4, #1
 8001e78:	f801 2f01 	strb.w	r2, [r1, #1]!
 8001e7c:	42a9      	cmp	r1, r5
 8001e7e:	d1fb      	bne.n	8001e78 <__sccl+0x1c>
 8001e80:	b90b      	cbnz	r3, 8001e86 <__sccl+0x2a>
 8001e82:	3801      	subs	r0, #1
 8001e84:	bd70      	pop	{r4, r5, r6, pc}
 8001e86:	f082 0101 	eor.w	r1, r2, #1
 8001e8a:	54e1      	strb	r1, [r4, r3]
 8001e8c:	1c42      	adds	r2, r0, #1
 8001e8e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8001e92:	4610      	mov	r0, r2
 8001e94:	2d2d      	cmp	r5, #45	; 0x2d
 8001e96:	f102 36ff 	add.w	r6, r2, #4294967295
 8001e9a:	d006      	beq.n	8001eaa <__sccl+0x4e>
 8001e9c:	2d5d      	cmp	r5, #93	; 0x5d
 8001e9e:	d0f1      	beq.n	8001e84 <__sccl+0x28>
 8001ea0:	b90d      	cbnz	r5, 8001ea6 <__sccl+0x4a>
 8001ea2:	4630      	mov	r0, r6
 8001ea4:	e7ee      	b.n	8001e84 <__sccl+0x28>
 8001ea6:	462b      	mov	r3, r5
 8001ea8:	e7ef      	b.n	8001e8a <__sccl+0x2e>
 8001eaa:	7816      	ldrb	r6, [r2, #0]
 8001eac:	2e5d      	cmp	r6, #93	; 0x5d
 8001eae:	d0fa      	beq.n	8001ea6 <__sccl+0x4a>
 8001eb0:	42b3      	cmp	r3, r6
 8001eb2:	dcf8      	bgt.n	8001ea6 <__sccl+0x4a>
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3001      	adds	r0, #1
 8001eb8:	4286      	cmp	r6, r0
 8001eba:	5421      	strb	r1, [r4, r0]
 8001ebc:	dcfb      	bgt.n	8001eb6 <__sccl+0x5a>
 8001ebe:	43d8      	mvns	r0, r3
 8001ec0:	4430      	add	r0, r6
 8001ec2:	42b3      	cmp	r3, r6
 8001ec4:	bfa8      	it	ge
 8001ec6:	2000      	movge	r0, #0
 8001ec8:	1c5d      	adds	r5, r3, #1
 8001eca:	182b      	adds	r3, r5, r0
 8001ecc:	3202      	adds	r2, #2
 8001ece:	e7de      	b.n	8001e8e <__sccl+0x32>

08001ed0 <__sread>:
 8001ed0:	b510      	push	{r4, lr}
 8001ed2:	460c      	mov	r4, r1
 8001ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ed8:	f000 fc1a 	bl	8002710 <_read_r>
 8001edc:	2800      	cmp	r0, #0
 8001ede:	bfab      	itete	ge
 8001ee0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8001ee4:	181b      	addge	r3, r3, r0
 8001ee6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001eea:	bfac      	ite	ge
 8001eec:	6563      	strge	r3, [r4, #84]	; 0x54
 8001eee:	81a3      	strhlt	r3, [r4, #12]
 8001ef0:	bd10      	pop	{r4, pc}

08001ef2 <__swrite>:
 8001ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ef6:	461f      	mov	r7, r3
 8001ef8:	898b      	ldrh	r3, [r1, #12]
 8001efa:	4605      	mov	r5, r0
 8001efc:	05db      	lsls	r3, r3, #23
 8001efe:	460c      	mov	r4, r1
 8001f00:	4616      	mov	r6, r2
 8001f02:	d505      	bpl.n	8001f10 <__swrite+0x1e>
 8001f04:	2302      	movs	r3, #2
 8001f06:	2200      	movs	r2, #0
 8001f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f0c:	f000 faf0 	bl	80024f0 <_lseek_r>
 8001f10:	89a3      	ldrh	r3, [r4, #12]
 8001f12:	4632      	mov	r2, r6
 8001f14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f18:	81a3      	strh	r3, [r4, #12]
 8001f1a:	4628      	mov	r0, r5
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f26:	f000 b9ed 	b.w	8002304 <_write_r>

08001f2a <__sseek>:
 8001f2a:	b510      	push	{r4, lr}
 8001f2c:	460c      	mov	r4, r1
 8001f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f32:	f000 fadd 	bl	80024f0 <_lseek_r>
 8001f36:	1c43      	adds	r3, r0, #1
 8001f38:	89a3      	ldrh	r3, [r4, #12]
 8001f3a:	bf15      	itete	ne
 8001f3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001f3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001f42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001f46:	81a3      	strheq	r3, [r4, #12]
 8001f48:	bf18      	it	ne
 8001f4a:	81a3      	strhne	r3, [r4, #12]
 8001f4c:	bd10      	pop	{r4, pc}

08001f4e <__sclose>:
 8001f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f52:	f000 b9e9 	b.w	8002328 <_close_r>
	...

08001f58 <_strtol_l.isra.0>:
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f5e:	4686      	mov	lr, r0
 8001f60:	d001      	beq.n	8001f66 <_strtol_l.isra.0+0xe>
 8001f62:	2b24      	cmp	r3, #36	; 0x24
 8001f64:	d906      	bls.n	8001f74 <_strtol_l.isra.0+0x1c>
 8001f66:	f7ff fa03 	bl	8001370 <__errno>
 8001f6a:	2316      	movs	r3, #22
 8001f6c:	6003      	str	r3, [r0, #0]
 8001f6e:	2000      	movs	r0, #0
 8001f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f74:	468c      	mov	ip, r1
 8001f76:	4e3a      	ldr	r6, [pc, #232]	; (8002060 <_strtol_l.isra.0+0x108>)
 8001f78:	4660      	mov	r0, ip
 8001f7a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8001f7e:	5da5      	ldrb	r5, [r4, r6]
 8001f80:	f015 0508 	ands.w	r5, r5, #8
 8001f84:	d1f8      	bne.n	8001f78 <_strtol_l.isra.0+0x20>
 8001f86:	2c2d      	cmp	r4, #45	; 0x2d
 8001f88:	d133      	bne.n	8001ff2 <_strtol_l.isra.0+0x9a>
 8001f8a:	f04f 0801 	mov.w	r8, #1
 8001f8e:	f89c 4000 	ldrb.w	r4, [ip]
 8001f92:	f100 0c02 	add.w	ip, r0, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d05d      	beq.n	8002056 <_strtol_l.isra.0+0xfe>
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d10c      	bne.n	8001fb8 <_strtol_l.isra.0+0x60>
 8001f9e:	2c30      	cmp	r4, #48	; 0x30
 8001fa0:	d10a      	bne.n	8001fb8 <_strtol_l.isra.0+0x60>
 8001fa2:	f89c 0000 	ldrb.w	r0, [ip]
 8001fa6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8001faa:	2858      	cmp	r0, #88	; 0x58
 8001fac:	d14e      	bne.n	800204c <_strtol_l.isra.0+0xf4>
 8001fae:	2310      	movs	r3, #16
 8001fb0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8001fb4:	f10c 0c02 	add.w	ip, ip, #2
 8001fb8:	2500      	movs	r5, #0
 8001fba:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8001fbe:	3f01      	subs	r7, #1
 8001fc0:	fbb7 f9f3 	udiv	r9, r7, r3
 8001fc4:	4628      	mov	r0, r5
 8001fc6:	fb03 7a19 	mls	sl, r3, r9, r7
 8001fca:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8001fce:	2e09      	cmp	r6, #9
 8001fd0:	d818      	bhi.n	8002004 <_strtol_l.isra.0+0xac>
 8001fd2:	4634      	mov	r4, r6
 8001fd4:	42a3      	cmp	r3, r4
 8001fd6:	dd24      	ble.n	8002022 <_strtol_l.isra.0+0xca>
 8001fd8:	2d00      	cmp	r5, #0
 8001fda:	db1f      	blt.n	800201c <_strtol_l.isra.0+0xc4>
 8001fdc:	4581      	cmp	r9, r0
 8001fde:	d31d      	bcc.n	800201c <_strtol_l.isra.0+0xc4>
 8001fe0:	d101      	bne.n	8001fe6 <_strtol_l.isra.0+0x8e>
 8001fe2:	45a2      	cmp	sl, r4
 8001fe4:	db1a      	blt.n	800201c <_strtol_l.isra.0+0xc4>
 8001fe6:	2501      	movs	r5, #1
 8001fe8:	fb00 4003 	mla	r0, r0, r3, r4
 8001fec:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8001ff0:	e7eb      	b.n	8001fca <_strtol_l.isra.0+0x72>
 8001ff2:	2c2b      	cmp	r4, #43	; 0x2b
 8001ff4:	bf08      	it	eq
 8001ff6:	f89c 4000 	ldrbeq.w	r4, [ip]
 8001ffa:	46a8      	mov	r8, r5
 8001ffc:	bf08      	it	eq
 8001ffe:	f100 0c02 	addeq.w	ip, r0, #2
 8002002:	e7c8      	b.n	8001f96 <_strtol_l.isra.0+0x3e>
 8002004:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8002008:	2e19      	cmp	r6, #25
 800200a:	d801      	bhi.n	8002010 <_strtol_l.isra.0+0xb8>
 800200c:	3c37      	subs	r4, #55	; 0x37
 800200e:	e7e1      	b.n	8001fd4 <_strtol_l.isra.0+0x7c>
 8002010:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8002014:	2e19      	cmp	r6, #25
 8002016:	d804      	bhi.n	8002022 <_strtol_l.isra.0+0xca>
 8002018:	3c57      	subs	r4, #87	; 0x57
 800201a:	e7db      	b.n	8001fd4 <_strtol_l.isra.0+0x7c>
 800201c:	f04f 35ff 	mov.w	r5, #4294967295
 8002020:	e7e4      	b.n	8001fec <_strtol_l.isra.0+0x94>
 8002022:	2d00      	cmp	r5, #0
 8002024:	da08      	bge.n	8002038 <_strtol_l.isra.0+0xe0>
 8002026:	2322      	movs	r3, #34	; 0x22
 8002028:	4638      	mov	r0, r7
 800202a:	f8ce 3000 	str.w	r3, [lr]
 800202e:	2a00      	cmp	r2, #0
 8002030:	d09e      	beq.n	8001f70 <_strtol_l.isra.0+0x18>
 8002032:	f10c 31ff 	add.w	r1, ip, #4294967295
 8002036:	e007      	b.n	8002048 <_strtol_l.isra.0+0xf0>
 8002038:	f1b8 0f00 	cmp.w	r8, #0
 800203c:	d000      	beq.n	8002040 <_strtol_l.isra.0+0xe8>
 800203e:	4240      	negs	r0, r0
 8002040:	2a00      	cmp	r2, #0
 8002042:	d095      	beq.n	8001f70 <_strtol_l.isra.0+0x18>
 8002044:	2d00      	cmp	r5, #0
 8002046:	d1f4      	bne.n	8002032 <_strtol_l.isra.0+0xda>
 8002048:	6011      	str	r1, [r2, #0]
 800204a:	e791      	b.n	8001f70 <_strtol_l.isra.0+0x18>
 800204c:	2430      	movs	r4, #48	; 0x30
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1b2      	bne.n	8001fb8 <_strtol_l.isra.0+0x60>
 8002052:	2308      	movs	r3, #8
 8002054:	e7b0      	b.n	8001fb8 <_strtol_l.isra.0+0x60>
 8002056:	2c30      	cmp	r4, #48	; 0x30
 8002058:	d0a3      	beq.n	8001fa2 <_strtol_l.isra.0+0x4a>
 800205a:	230a      	movs	r3, #10
 800205c:	e7ac      	b.n	8001fb8 <_strtol_l.isra.0+0x60>
 800205e:	bf00      	nop
 8002060:	08002858 	.word	0x08002858

08002064 <_strtol_r>:
 8002064:	f7ff bf78 	b.w	8001f58 <_strtol_l.isra.0>

08002068 <_strtoul_l.isra.0>:
 8002068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800206c:	468c      	mov	ip, r1
 800206e:	4686      	mov	lr, r0
 8002070:	4e3a      	ldr	r6, [pc, #232]	; (800215c <_strtoul_l.isra.0+0xf4>)
 8002072:	4660      	mov	r0, ip
 8002074:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8002078:	5da5      	ldrb	r5, [r4, r6]
 800207a:	f015 0508 	ands.w	r5, r5, #8
 800207e:	d1f8      	bne.n	8002072 <_strtoul_l.isra.0+0xa>
 8002080:	2c2d      	cmp	r4, #45	; 0x2d
 8002082:	d134      	bne.n	80020ee <_strtoul_l.isra.0+0x86>
 8002084:	f04f 0801 	mov.w	r8, #1
 8002088:	f89c 4000 	ldrb.w	r4, [ip]
 800208c:	f100 0c02 	add.w	ip, r0, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d05e      	beq.n	8002152 <_strtoul_l.isra.0+0xea>
 8002094:	2b10      	cmp	r3, #16
 8002096:	d10c      	bne.n	80020b2 <_strtoul_l.isra.0+0x4a>
 8002098:	2c30      	cmp	r4, #48	; 0x30
 800209a:	d10a      	bne.n	80020b2 <_strtoul_l.isra.0+0x4a>
 800209c:	f89c 0000 	ldrb.w	r0, [ip]
 80020a0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80020a4:	2858      	cmp	r0, #88	; 0x58
 80020a6:	d14f      	bne.n	8002148 <_strtoul_l.isra.0+0xe0>
 80020a8:	2310      	movs	r3, #16
 80020aa:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80020ae:	f10c 0c02 	add.w	ip, ip, #2
 80020b2:	f04f 37ff 	mov.w	r7, #4294967295
 80020b6:	fbb7 f7f3 	udiv	r7, r7, r3
 80020ba:	2500      	movs	r5, #0
 80020bc:	fb03 f907 	mul.w	r9, r3, r7
 80020c0:	4628      	mov	r0, r5
 80020c2:	ea6f 0909 	mvn.w	r9, r9
 80020c6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80020ca:	2e09      	cmp	r6, #9
 80020cc:	d818      	bhi.n	8002100 <_strtoul_l.isra.0+0x98>
 80020ce:	4634      	mov	r4, r6
 80020d0:	42a3      	cmp	r3, r4
 80020d2:	dd24      	ble.n	800211e <_strtoul_l.isra.0+0xb6>
 80020d4:	2d00      	cmp	r5, #0
 80020d6:	db1f      	blt.n	8002118 <_strtoul_l.isra.0+0xb0>
 80020d8:	4287      	cmp	r7, r0
 80020da:	d31d      	bcc.n	8002118 <_strtoul_l.isra.0+0xb0>
 80020dc:	d101      	bne.n	80020e2 <_strtoul_l.isra.0+0x7a>
 80020de:	45a1      	cmp	r9, r4
 80020e0:	db1a      	blt.n	8002118 <_strtoul_l.isra.0+0xb0>
 80020e2:	2501      	movs	r5, #1
 80020e4:	fb00 4003 	mla	r0, r0, r3, r4
 80020e8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80020ec:	e7eb      	b.n	80020c6 <_strtoul_l.isra.0+0x5e>
 80020ee:	2c2b      	cmp	r4, #43	; 0x2b
 80020f0:	bf08      	it	eq
 80020f2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80020f6:	46a8      	mov	r8, r5
 80020f8:	bf08      	it	eq
 80020fa:	f100 0c02 	addeq.w	ip, r0, #2
 80020fe:	e7c7      	b.n	8002090 <_strtoul_l.isra.0+0x28>
 8002100:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8002104:	2e19      	cmp	r6, #25
 8002106:	d801      	bhi.n	800210c <_strtoul_l.isra.0+0xa4>
 8002108:	3c37      	subs	r4, #55	; 0x37
 800210a:	e7e1      	b.n	80020d0 <_strtoul_l.isra.0+0x68>
 800210c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8002110:	2e19      	cmp	r6, #25
 8002112:	d804      	bhi.n	800211e <_strtoul_l.isra.0+0xb6>
 8002114:	3c57      	subs	r4, #87	; 0x57
 8002116:	e7db      	b.n	80020d0 <_strtoul_l.isra.0+0x68>
 8002118:	f04f 35ff 	mov.w	r5, #4294967295
 800211c:	e7e4      	b.n	80020e8 <_strtoul_l.isra.0+0x80>
 800211e:	2d00      	cmp	r5, #0
 8002120:	da07      	bge.n	8002132 <_strtoul_l.isra.0+0xca>
 8002122:	2322      	movs	r3, #34	; 0x22
 8002124:	f04f 30ff 	mov.w	r0, #4294967295
 8002128:	f8ce 3000 	str.w	r3, [lr]
 800212c:	b942      	cbnz	r2, 8002140 <_strtoul_l.isra.0+0xd8>
 800212e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002132:	f1b8 0f00 	cmp.w	r8, #0
 8002136:	d000      	beq.n	800213a <_strtoul_l.isra.0+0xd2>
 8002138:	4240      	negs	r0, r0
 800213a:	2a00      	cmp	r2, #0
 800213c:	d0f7      	beq.n	800212e <_strtoul_l.isra.0+0xc6>
 800213e:	b10d      	cbz	r5, 8002144 <_strtoul_l.isra.0+0xdc>
 8002140:	f10c 31ff 	add.w	r1, ip, #4294967295
 8002144:	6011      	str	r1, [r2, #0]
 8002146:	e7f2      	b.n	800212e <_strtoul_l.isra.0+0xc6>
 8002148:	2430      	movs	r4, #48	; 0x30
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1b1      	bne.n	80020b2 <_strtoul_l.isra.0+0x4a>
 800214e:	2308      	movs	r3, #8
 8002150:	e7af      	b.n	80020b2 <_strtoul_l.isra.0+0x4a>
 8002152:	2c30      	cmp	r4, #48	; 0x30
 8002154:	d0a2      	beq.n	800209c <_strtoul_l.isra.0+0x34>
 8002156:	230a      	movs	r3, #10
 8002158:	e7ab      	b.n	80020b2 <_strtoul_l.isra.0+0x4a>
 800215a:	bf00      	nop
 800215c:	08002858 	.word	0x08002858

08002160 <_strtoul_r>:
 8002160:	f7ff bf82 	b.w	8002068 <_strtoul_l.isra.0>

08002164 <__submore>:
 8002164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002168:	460c      	mov	r4, r1
 800216a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800216c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002170:	4299      	cmp	r1, r3
 8002172:	d11b      	bne.n	80021ac <__submore+0x48>
 8002174:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002178:	f7ff fa5a 	bl	8001630 <_malloc_r>
 800217c:	b918      	cbnz	r0, 8002186 <__submore+0x22>
 800217e:	f04f 30ff 	mov.w	r0, #4294967295
 8002182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800218a:	63a3      	str	r3, [r4, #56]	; 0x38
 800218c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002190:	6360      	str	r0, [r4, #52]	; 0x34
 8002192:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8002196:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800219a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800219e:	7043      	strb	r3, [r0, #1]
 80021a0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80021a4:	7003      	strb	r3, [r0, #0]
 80021a6:	6020      	str	r0, [r4, #0]
 80021a8:	2000      	movs	r0, #0
 80021aa:	e7ea      	b.n	8002182 <__submore+0x1e>
 80021ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80021ae:	0077      	lsls	r7, r6, #1
 80021b0:	463a      	mov	r2, r7
 80021b2:	f000 fa87 	bl	80026c4 <_realloc_r>
 80021b6:	4605      	mov	r5, r0
 80021b8:	2800      	cmp	r0, #0
 80021ba:	d0e0      	beq.n	800217e <__submore+0x1a>
 80021bc:	eb00 0806 	add.w	r8, r0, r6
 80021c0:	4601      	mov	r1, r0
 80021c2:	4632      	mov	r2, r6
 80021c4:	4640      	mov	r0, r8
 80021c6:	f000 fa17 	bl	80025f8 <memcpy>
 80021ca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80021ce:	f8c4 8000 	str.w	r8, [r4]
 80021d2:	e7e9      	b.n	80021a8 <__submore+0x44>

080021d4 <_ungetc_r>:
 80021d4:	b570      	push	{r4, r5, r6, lr}
 80021d6:	4614      	mov	r4, r2
 80021d8:	1c4a      	adds	r2, r1, #1
 80021da:	4606      	mov	r6, r0
 80021dc:	460d      	mov	r5, r1
 80021de:	d103      	bne.n	80021e8 <_ungetc_r+0x14>
 80021e0:	f04f 35ff 	mov.w	r5, #4294967295
 80021e4:	4628      	mov	r0, r5
 80021e6:	bd70      	pop	{r4, r5, r6, pc}
 80021e8:	b118      	cbz	r0, 80021f2 <_ungetc_r+0x1e>
 80021ea:	6983      	ldr	r3, [r0, #24]
 80021ec:	b90b      	cbnz	r3, 80021f2 <_ungetc_r+0x1e>
 80021ee:	f7ff f961 	bl	80014b4 <__sinit>
 80021f2:	4b41      	ldr	r3, [pc, #260]	; (80022f8 <_ungetc_r+0x124>)
 80021f4:	429c      	cmp	r4, r3
 80021f6:	d11d      	bne.n	8002234 <_ungetc_r+0x60>
 80021f8:	6874      	ldr	r4, [r6, #4]
 80021fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80021fc:	07db      	lsls	r3, r3, #31
 80021fe:	d405      	bmi.n	800220c <_ungetc_r+0x38>
 8002200:	89a3      	ldrh	r3, [r4, #12]
 8002202:	0598      	lsls	r0, r3, #22
 8002204:	d402      	bmi.n	800220c <_ungetc_r+0x38>
 8002206:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002208:	f7ff fa0f 	bl	800162a <__retarget_lock_acquire_recursive>
 800220c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002210:	f023 0320 	bic.w	r3, r3, #32
 8002214:	0759      	lsls	r1, r3, #29
 8002216:	81a3      	strh	r3, [r4, #12]
 8002218:	b29a      	uxth	r2, r3
 800221a:	d42d      	bmi.n	8002278 <_ungetc_r+0xa4>
 800221c:	06d3      	lsls	r3, r2, #27
 800221e:	d413      	bmi.n	8002248 <_ungetc_r+0x74>
 8002220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002222:	07dd      	lsls	r5, r3, #31
 8002224:	d4dc      	bmi.n	80021e0 <_ungetc_r+0xc>
 8002226:	f412 7f00 	tst.w	r2, #512	; 0x200
 800222a:	d1d9      	bne.n	80021e0 <_ungetc_r+0xc>
 800222c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800222e:	f7ff f9fd 	bl	800162c <__retarget_lock_release_recursive>
 8002232:	e7d5      	b.n	80021e0 <_ungetc_r+0xc>
 8002234:	4b31      	ldr	r3, [pc, #196]	; (80022fc <_ungetc_r+0x128>)
 8002236:	429c      	cmp	r4, r3
 8002238:	d101      	bne.n	800223e <_ungetc_r+0x6a>
 800223a:	68b4      	ldr	r4, [r6, #8]
 800223c:	e7dd      	b.n	80021fa <_ungetc_r+0x26>
 800223e:	4b30      	ldr	r3, [pc, #192]	; (8002300 <_ungetc_r+0x12c>)
 8002240:	429c      	cmp	r4, r3
 8002242:	bf08      	it	eq
 8002244:	68f4      	ldreq	r4, [r6, #12]
 8002246:	e7d8      	b.n	80021fa <_ungetc_r+0x26>
 8002248:	0710      	lsls	r0, r2, #28
 800224a:	d511      	bpl.n	8002270 <_ungetc_r+0x9c>
 800224c:	4621      	mov	r1, r4
 800224e:	4630      	mov	r0, r6
 8002250:	f000 f900 	bl	8002454 <_fflush_r>
 8002254:	b130      	cbz	r0, 8002264 <_ungetc_r+0x90>
 8002256:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002258:	07d9      	lsls	r1, r3, #31
 800225a:	d4c1      	bmi.n	80021e0 <_ungetc_r+0xc>
 800225c:	89a3      	ldrh	r3, [r4, #12]
 800225e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002262:	e7e2      	b.n	800222a <_ungetc_r+0x56>
 8002264:	89a3      	ldrh	r3, [r4, #12]
 8002266:	60a0      	str	r0, [r4, #8]
 8002268:	f023 0308 	bic.w	r3, r3, #8
 800226c:	81a3      	strh	r3, [r4, #12]
 800226e:	61a0      	str	r0, [r4, #24]
 8002270:	89a3      	ldrh	r3, [r4, #12]
 8002272:	f043 0304 	orr.w	r3, r3, #4
 8002276:	81a3      	strh	r3, [r4, #12]
 8002278:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800227a:	6862      	ldr	r2, [r4, #4]
 800227c:	b2ed      	uxtb	r5, r5
 800227e:	b1d3      	cbz	r3, 80022b6 <_ungetc_r+0xe2>
 8002280:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002282:	4293      	cmp	r3, r2
 8002284:	dc05      	bgt.n	8002292 <_ungetc_r+0xbe>
 8002286:	4621      	mov	r1, r4
 8002288:	4630      	mov	r0, r6
 800228a:	f7ff ff6b 	bl	8002164 <__submore>
 800228e:	2800      	cmp	r0, #0
 8002290:	d1e1      	bne.n	8002256 <_ungetc_r+0x82>
 8002292:	6823      	ldr	r3, [r4, #0]
 8002294:	1e5a      	subs	r2, r3, #1
 8002296:	6022      	str	r2, [r4, #0]
 8002298:	f803 5c01 	strb.w	r5, [r3, #-1]
 800229c:	6863      	ldr	r3, [r4, #4]
 800229e:	3301      	adds	r3, #1
 80022a0:	6063      	str	r3, [r4, #4]
 80022a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022a4:	07da      	lsls	r2, r3, #31
 80022a6:	d49d      	bmi.n	80021e4 <_ungetc_r+0x10>
 80022a8:	89a3      	ldrh	r3, [r4, #12]
 80022aa:	059b      	lsls	r3, r3, #22
 80022ac:	d49a      	bmi.n	80021e4 <_ungetc_r+0x10>
 80022ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022b0:	f7ff f9bc 	bl	800162c <__retarget_lock_release_recursive>
 80022b4:	e796      	b.n	80021e4 <_ungetc_r+0x10>
 80022b6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80022b8:	6920      	ldr	r0, [r4, #16]
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	f001 0101 	and.w	r1, r1, #1
 80022c0:	b160      	cbz	r0, 80022dc <_ungetc_r+0x108>
 80022c2:	4298      	cmp	r0, r3
 80022c4:	d20a      	bcs.n	80022dc <_ungetc_r+0x108>
 80022c6:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80022ca:	42a8      	cmp	r0, r5
 80022cc:	d106      	bne.n	80022dc <_ungetc_r+0x108>
 80022ce:	3b01      	subs	r3, #1
 80022d0:	3201      	adds	r2, #1
 80022d2:	6023      	str	r3, [r4, #0]
 80022d4:	6062      	str	r2, [r4, #4]
 80022d6:	2900      	cmp	r1, #0
 80022d8:	d184      	bne.n	80021e4 <_ungetc_r+0x10>
 80022da:	e7e5      	b.n	80022a8 <_ungetc_r+0xd4>
 80022dc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80022e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022e4:	6363      	str	r3, [r4, #52]	; 0x34
 80022e6:	2303      	movs	r3, #3
 80022e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80022ea:	4623      	mov	r3, r4
 80022ec:	f803 5f46 	strb.w	r5, [r3, #70]!
 80022f0:	6023      	str	r3, [r4, #0]
 80022f2:	2301      	movs	r3, #1
 80022f4:	6063      	str	r3, [r4, #4]
 80022f6:	e7ee      	b.n	80022d6 <_ungetc_r+0x102>
 80022f8:	080027f8 	.word	0x080027f8
 80022fc:	08002818 	.word	0x08002818
 8002300:	080027d8 	.word	0x080027d8

08002304 <_write_r>:
 8002304:	b538      	push	{r3, r4, r5, lr}
 8002306:	4604      	mov	r4, r0
 8002308:	4608      	mov	r0, r1
 800230a:	4611      	mov	r1, r2
 800230c:	2200      	movs	r2, #0
 800230e:	4d05      	ldr	r5, [pc, #20]	; (8002324 <_write_r+0x20>)
 8002310:	602a      	str	r2, [r5, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	f7fe f8a6 	bl	8000464 <_write>
 8002318:	1c43      	adds	r3, r0, #1
 800231a:	d102      	bne.n	8002322 <_write_r+0x1e>
 800231c:	682b      	ldr	r3, [r5, #0]
 800231e:	b103      	cbz	r3, 8002322 <_write_r+0x1e>
 8002320:	6023      	str	r3, [r4, #0]
 8002322:	bd38      	pop	{r3, r4, r5, pc}
 8002324:	200000a8 	.word	0x200000a8

08002328 <_close_r>:
 8002328:	b538      	push	{r3, r4, r5, lr}
 800232a:	2300      	movs	r3, #0
 800232c:	4d05      	ldr	r5, [pc, #20]	; (8002344 <_close_r+0x1c>)
 800232e:	4604      	mov	r4, r0
 8002330:	4608      	mov	r0, r1
 8002332:	602b      	str	r3, [r5, #0]
 8002334:	f7fe f8b2 	bl	800049c <_close>
 8002338:	1c43      	adds	r3, r0, #1
 800233a:	d102      	bne.n	8002342 <_close_r+0x1a>
 800233c:	682b      	ldr	r3, [r5, #0]
 800233e:	b103      	cbz	r3, 8002342 <_close_r+0x1a>
 8002340:	6023      	str	r3, [r4, #0]
 8002342:	bd38      	pop	{r3, r4, r5, pc}
 8002344:	200000a8 	.word	0x200000a8

08002348 <__sflush_r>:
 8002348:	898a      	ldrh	r2, [r1, #12]
 800234a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800234e:	4605      	mov	r5, r0
 8002350:	0710      	lsls	r0, r2, #28
 8002352:	460c      	mov	r4, r1
 8002354:	d458      	bmi.n	8002408 <__sflush_r+0xc0>
 8002356:	684b      	ldr	r3, [r1, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	dc05      	bgt.n	8002368 <__sflush_r+0x20>
 800235c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800235e:	2b00      	cmp	r3, #0
 8002360:	dc02      	bgt.n	8002368 <__sflush_r+0x20>
 8002362:	2000      	movs	r0, #0
 8002364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002368:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800236a:	2e00      	cmp	r6, #0
 800236c:	d0f9      	beq.n	8002362 <__sflush_r+0x1a>
 800236e:	2300      	movs	r3, #0
 8002370:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002374:	682f      	ldr	r7, [r5, #0]
 8002376:	602b      	str	r3, [r5, #0]
 8002378:	d032      	beq.n	80023e0 <__sflush_r+0x98>
 800237a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800237c:	89a3      	ldrh	r3, [r4, #12]
 800237e:	075a      	lsls	r2, r3, #29
 8002380:	d505      	bpl.n	800238e <__sflush_r+0x46>
 8002382:	6863      	ldr	r3, [r4, #4]
 8002384:	1ac0      	subs	r0, r0, r3
 8002386:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002388:	b10b      	cbz	r3, 800238e <__sflush_r+0x46>
 800238a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800238c:	1ac0      	subs	r0, r0, r3
 800238e:	2300      	movs	r3, #0
 8002390:	4602      	mov	r2, r0
 8002392:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002394:	4628      	mov	r0, r5
 8002396:	6a21      	ldr	r1, [r4, #32]
 8002398:	47b0      	blx	r6
 800239a:	1c43      	adds	r3, r0, #1
 800239c:	89a3      	ldrh	r3, [r4, #12]
 800239e:	d106      	bne.n	80023ae <__sflush_r+0x66>
 80023a0:	6829      	ldr	r1, [r5, #0]
 80023a2:	291d      	cmp	r1, #29
 80023a4:	d82c      	bhi.n	8002400 <__sflush_r+0xb8>
 80023a6:	4a2a      	ldr	r2, [pc, #168]	; (8002450 <__sflush_r+0x108>)
 80023a8:	40ca      	lsrs	r2, r1
 80023aa:	07d6      	lsls	r6, r2, #31
 80023ac:	d528      	bpl.n	8002400 <__sflush_r+0xb8>
 80023ae:	2200      	movs	r2, #0
 80023b0:	6062      	str	r2, [r4, #4]
 80023b2:	6922      	ldr	r2, [r4, #16]
 80023b4:	04d9      	lsls	r1, r3, #19
 80023b6:	6022      	str	r2, [r4, #0]
 80023b8:	d504      	bpl.n	80023c4 <__sflush_r+0x7c>
 80023ba:	1c42      	adds	r2, r0, #1
 80023bc:	d101      	bne.n	80023c2 <__sflush_r+0x7a>
 80023be:	682b      	ldr	r3, [r5, #0]
 80023c0:	b903      	cbnz	r3, 80023c4 <__sflush_r+0x7c>
 80023c2:	6560      	str	r0, [r4, #84]	; 0x54
 80023c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023c6:	602f      	str	r7, [r5, #0]
 80023c8:	2900      	cmp	r1, #0
 80023ca:	d0ca      	beq.n	8002362 <__sflush_r+0x1a>
 80023cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80023d0:	4299      	cmp	r1, r3
 80023d2:	d002      	beq.n	80023da <__sflush_r+0x92>
 80023d4:	4628      	mov	r0, r5
 80023d6:	f000 f929 	bl	800262c <_free_r>
 80023da:	2000      	movs	r0, #0
 80023dc:	6360      	str	r0, [r4, #52]	; 0x34
 80023de:	e7c1      	b.n	8002364 <__sflush_r+0x1c>
 80023e0:	6a21      	ldr	r1, [r4, #32]
 80023e2:	2301      	movs	r3, #1
 80023e4:	4628      	mov	r0, r5
 80023e6:	47b0      	blx	r6
 80023e8:	1c41      	adds	r1, r0, #1
 80023ea:	d1c7      	bne.n	800237c <__sflush_r+0x34>
 80023ec:	682b      	ldr	r3, [r5, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0c4      	beq.n	800237c <__sflush_r+0x34>
 80023f2:	2b1d      	cmp	r3, #29
 80023f4:	d001      	beq.n	80023fa <__sflush_r+0xb2>
 80023f6:	2b16      	cmp	r3, #22
 80023f8:	d101      	bne.n	80023fe <__sflush_r+0xb6>
 80023fa:	602f      	str	r7, [r5, #0]
 80023fc:	e7b1      	b.n	8002362 <__sflush_r+0x1a>
 80023fe:	89a3      	ldrh	r3, [r4, #12]
 8002400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002404:	81a3      	strh	r3, [r4, #12]
 8002406:	e7ad      	b.n	8002364 <__sflush_r+0x1c>
 8002408:	690f      	ldr	r7, [r1, #16]
 800240a:	2f00      	cmp	r7, #0
 800240c:	d0a9      	beq.n	8002362 <__sflush_r+0x1a>
 800240e:	0793      	lsls	r3, r2, #30
 8002410:	bf18      	it	ne
 8002412:	2300      	movne	r3, #0
 8002414:	680e      	ldr	r6, [r1, #0]
 8002416:	bf08      	it	eq
 8002418:	694b      	ldreq	r3, [r1, #20]
 800241a:	eba6 0807 	sub.w	r8, r6, r7
 800241e:	600f      	str	r7, [r1, #0]
 8002420:	608b      	str	r3, [r1, #8]
 8002422:	f1b8 0f00 	cmp.w	r8, #0
 8002426:	dd9c      	ble.n	8002362 <__sflush_r+0x1a>
 8002428:	4643      	mov	r3, r8
 800242a:	463a      	mov	r2, r7
 800242c:	4628      	mov	r0, r5
 800242e:	6a21      	ldr	r1, [r4, #32]
 8002430:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002432:	47b0      	blx	r6
 8002434:	2800      	cmp	r0, #0
 8002436:	dc06      	bgt.n	8002446 <__sflush_r+0xfe>
 8002438:	89a3      	ldrh	r3, [r4, #12]
 800243a:	f04f 30ff 	mov.w	r0, #4294967295
 800243e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002442:	81a3      	strh	r3, [r4, #12]
 8002444:	e78e      	b.n	8002364 <__sflush_r+0x1c>
 8002446:	4407      	add	r7, r0
 8002448:	eba8 0800 	sub.w	r8, r8, r0
 800244c:	e7e9      	b.n	8002422 <__sflush_r+0xda>
 800244e:	bf00      	nop
 8002450:	20400001 	.word	0x20400001

08002454 <_fflush_r>:
 8002454:	b538      	push	{r3, r4, r5, lr}
 8002456:	690b      	ldr	r3, [r1, #16]
 8002458:	4605      	mov	r5, r0
 800245a:	460c      	mov	r4, r1
 800245c:	b913      	cbnz	r3, 8002464 <_fflush_r+0x10>
 800245e:	2500      	movs	r5, #0
 8002460:	4628      	mov	r0, r5
 8002462:	bd38      	pop	{r3, r4, r5, pc}
 8002464:	b118      	cbz	r0, 800246e <_fflush_r+0x1a>
 8002466:	6983      	ldr	r3, [r0, #24]
 8002468:	b90b      	cbnz	r3, 800246e <_fflush_r+0x1a>
 800246a:	f7ff f823 	bl	80014b4 <__sinit>
 800246e:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <_fflush_r+0x6c>)
 8002470:	429c      	cmp	r4, r3
 8002472:	d11b      	bne.n	80024ac <_fflush_r+0x58>
 8002474:	686c      	ldr	r4, [r5, #4]
 8002476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0ef      	beq.n	800245e <_fflush_r+0xa>
 800247e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002480:	07d0      	lsls	r0, r2, #31
 8002482:	d404      	bmi.n	800248e <_fflush_r+0x3a>
 8002484:	0599      	lsls	r1, r3, #22
 8002486:	d402      	bmi.n	800248e <_fflush_r+0x3a>
 8002488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800248a:	f7ff f8ce 	bl	800162a <__retarget_lock_acquire_recursive>
 800248e:	4628      	mov	r0, r5
 8002490:	4621      	mov	r1, r4
 8002492:	f7ff ff59 	bl	8002348 <__sflush_r>
 8002496:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002498:	4605      	mov	r5, r0
 800249a:	07da      	lsls	r2, r3, #31
 800249c:	d4e0      	bmi.n	8002460 <_fflush_r+0xc>
 800249e:	89a3      	ldrh	r3, [r4, #12]
 80024a0:	059b      	lsls	r3, r3, #22
 80024a2:	d4dd      	bmi.n	8002460 <_fflush_r+0xc>
 80024a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024a6:	f7ff f8c1 	bl	800162c <__retarget_lock_release_recursive>
 80024aa:	e7d9      	b.n	8002460 <_fflush_r+0xc>
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <_fflush_r+0x70>)
 80024ae:	429c      	cmp	r4, r3
 80024b0:	d101      	bne.n	80024b6 <_fflush_r+0x62>
 80024b2:	68ac      	ldr	r4, [r5, #8]
 80024b4:	e7df      	b.n	8002476 <_fflush_r+0x22>
 80024b6:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <_fflush_r+0x74>)
 80024b8:	429c      	cmp	r4, r3
 80024ba:	bf08      	it	eq
 80024bc:	68ec      	ldreq	r4, [r5, #12]
 80024be:	e7da      	b.n	8002476 <_fflush_r+0x22>
 80024c0:	080027f8 	.word	0x080027f8
 80024c4:	08002818 	.word	0x08002818
 80024c8:	080027d8 	.word	0x080027d8

080024cc <fflush>:
 80024cc:	4601      	mov	r1, r0
 80024ce:	b920      	cbnz	r0, 80024da <fflush+0xe>
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <fflush+0x18>)
 80024d2:	4905      	ldr	r1, [pc, #20]	; (80024e8 <fflush+0x1c>)
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	f7ff b888 	b.w	80015ea <_fwalk_reent>
 80024da:	4b04      	ldr	r3, [pc, #16]	; (80024ec <fflush+0x20>)
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	f7ff bfb9 	b.w	8002454 <_fflush_r>
 80024e2:	bf00      	nop
 80024e4:	080027d4 	.word	0x080027d4
 80024e8:	08002455 	.word	0x08002455
 80024ec:	2000000c 	.word	0x2000000c

080024f0 <_lseek_r>:
 80024f0:	b538      	push	{r3, r4, r5, lr}
 80024f2:	4604      	mov	r4, r0
 80024f4:	4608      	mov	r0, r1
 80024f6:	4611      	mov	r1, r2
 80024f8:	2200      	movs	r2, #0
 80024fa:	4d05      	ldr	r5, [pc, #20]	; (8002510 <_lseek_r+0x20>)
 80024fc:	602a      	str	r2, [r5, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	f7fd fff0 	bl	80004e4 <_lseek>
 8002504:	1c43      	adds	r3, r0, #1
 8002506:	d102      	bne.n	800250e <_lseek_r+0x1e>
 8002508:	682b      	ldr	r3, [r5, #0]
 800250a:	b103      	cbz	r3, 800250e <_lseek_r+0x1e>
 800250c:	6023      	str	r3, [r4, #0]
 800250e:	bd38      	pop	{r3, r4, r5, pc}
 8002510:	200000a8 	.word	0x200000a8

08002514 <__swhatbuf_r>:
 8002514:	b570      	push	{r4, r5, r6, lr}
 8002516:	460e      	mov	r6, r1
 8002518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800251c:	4614      	mov	r4, r2
 800251e:	2900      	cmp	r1, #0
 8002520:	461d      	mov	r5, r3
 8002522:	b096      	sub	sp, #88	; 0x58
 8002524:	da07      	bge.n	8002536 <__swhatbuf_r+0x22>
 8002526:	2300      	movs	r3, #0
 8002528:	602b      	str	r3, [r5, #0]
 800252a:	89b3      	ldrh	r3, [r6, #12]
 800252c:	061a      	lsls	r2, r3, #24
 800252e:	d410      	bmi.n	8002552 <__swhatbuf_r+0x3e>
 8002530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002534:	e00e      	b.n	8002554 <__swhatbuf_r+0x40>
 8002536:	466a      	mov	r2, sp
 8002538:	f000 f8fc 	bl	8002734 <_fstat_r>
 800253c:	2800      	cmp	r0, #0
 800253e:	dbf2      	blt.n	8002526 <__swhatbuf_r+0x12>
 8002540:	9a01      	ldr	r2, [sp, #4]
 8002542:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002546:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800254a:	425a      	negs	r2, r3
 800254c:	415a      	adcs	r2, r3
 800254e:	602a      	str	r2, [r5, #0]
 8002550:	e7ee      	b.n	8002530 <__swhatbuf_r+0x1c>
 8002552:	2340      	movs	r3, #64	; 0x40
 8002554:	2000      	movs	r0, #0
 8002556:	6023      	str	r3, [r4, #0]
 8002558:	b016      	add	sp, #88	; 0x58
 800255a:	bd70      	pop	{r4, r5, r6, pc}

0800255c <__smakebuf_r>:
 800255c:	898b      	ldrh	r3, [r1, #12]
 800255e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002560:	079d      	lsls	r5, r3, #30
 8002562:	4606      	mov	r6, r0
 8002564:	460c      	mov	r4, r1
 8002566:	d507      	bpl.n	8002578 <__smakebuf_r+0x1c>
 8002568:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800256c:	6023      	str	r3, [r4, #0]
 800256e:	6123      	str	r3, [r4, #16]
 8002570:	2301      	movs	r3, #1
 8002572:	6163      	str	r3, [r4, #20]
 8002574:	b002      	add	sp, #8
 8002576:	bd70      	pop	{r4, r5, r6, pc}
 8002578:	466a      	mov	r2, sp
 800257a:	ab01      	add	r3, sp, #4
 800257c:	f7ff ffca 	bl	8002514 <__swhatbuf_r>
 8002580:	9900      	ldr	r1, [sp, #0]
 8002582:	4605      	mov	r5, r0
 8002584:	4630      	mov	r0, r6
 8002586:	f7ff f853 	bl	8001630 <_malloc_r>
 800258a:	b948      	cbnz	r0, 80025a0 <__smakebuf_r+0x44>
 800258c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002590:	059a      	lsls	r2, r3, #22
 8002592:	d4ef      	bmi.n	8002574 <__smakebuf_r+0x18>
 8002594:	f023 0303 	bic.w	r3, r3, #3
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	81a3      	strh	r3, [r4, #12]
 800259e:	e7e3      	b.n	8002568 <__smakebuf_r+0xc>
 80025a0:	4b0d      	ldr	r3, [pc, #52]	; (80025d8 <__smakebuf_r+0x7c>)
 80025a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80025a4:	89a3      	ldrh	r3, [r4, #12]
 80025a6:	6020      	str	r0, [r4, #0]
 80025a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ac:	81a3      	strh	r3, [r4, #12]
 80025ae:	9b00      	ldr	r3, [sp, #0]
 80025b0:	6120      	str	r0, [r4, #16]
 80025b2:	6163      	str	r3, [r4, #20]
 80025b4:	9b01      	ldr	r3, [sp, #4]
 80025b6:	b15b      	cbz	r3, 80025d0 <__smakebuf_r+0x74>
 80025b8:	4630      	mov	r0, r6
 80025ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025be:	f000 f8cb 	bl	8002758 <_isatty_r>
 80025c2:	b128      	cbz	r0, 80025d0 <__smakebuf_r+0x74>
 80025c4:	89a3      	ldrh	r3, [r4, #12]
 80025c6:	f023 0303 	bic.w	r3, r3, #3
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	81a3      	strh	r3, [r4, #12]
 80025d0:	89a0      	ldrh	r0, [r4, #12]
 80025d2:	4305      	orrs	r5, r0
 80025d4:	81a5      	strh	r5, [r4, #12]
 80025d6:	e7cd      	b.n	8002574 <__smakebuf_r+0x18>
 80025d8:	0800144d 	.word	0x0800144d

080025dc <memchr>:
 80025dc:	4603      	mov	r3, r0
 80025de:	b510      	push	{r4, lr}
 80025e0:	b2c9      	uxtb	r1, r1
 80025e2:	4402      	add	r2, r0
 80025e4:	4293      	cmp	r3, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	d101      	bne.n	80025ee <memchr+0x12>
 80025ea:	2000      	movs	r0, #0
 80025ec:	e003      	b.n	80025f6 <memchr+0x1a>
 80025ee:	7804      	ldrb	r4, [r0, #0]
 80025f0:	3301      	adds	r3, #1
 80025f2:	428c      	cmp	r4, r1
 80025f4:	d1f6      	bne.n	80025e4 <memchr+0x8>
 80025f6:	bd10      	pop	{r4, pc}

080025f8 <memcpy>:
 80025f8:	440a      	add	r2, r1
 80025fa:	4291      	cmp	r1, r2
 80025fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002600:	d100      	bne.n	8002604 <memcpy+0xc>
 8002602:	4770      	bx	lr
 8002604:	b510      	push	{r4, lr}
 8002606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800260a:	4291      	cmp	r1, r2
 800260c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002610:	d1f9      	bne.n	8002606 <memcpy+0xe>
 8002612:	bd10      	pop	{r4, pc}

08002614 <__malloc_lock>:
 8002614:	4801      	ldr	r0, [pc, #4]	; (800261c <__malloc_lock+0x8>)
 8002616:	f7ff b808 	b.w	800162a <__retarget_lock_acquire_recursive>
 800261a:	bf00      	nop
 800261c:	200000a0 	.word	0x200000a0

08002620 <__malloc_unlock>:
 8002620:	4801      	ldr	r0, [pc, #4]	; (8002628 <__malloc_unlock+0x8>)
 8002622:	f7ff b803 	b.w	800162c <__retarget_lock_release_recursive>
 8002626:	bf00      	nop
 8002628:	200000a0 	.word	0x200000a0

0800262c <_free_r>:
 800262c:	b538      	push	{r3, r4, r5, lr}
 800262e:	4605      	mov	r5, r0
 8002630:	2900      	cmp	r1, #0
 8002632:	d043      	beq.n	80026bc <_free_r+0x90>
 8002634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002638:	1f0c      	subs	r4, r1, #4
 800263a:	2b00      	cmp	r3, #0
 800263c:	bfb8      	it	lt
 800263e:	18e4      	addlt	r4, r4, r3
 8002640:	f7ff ffe8 	bl	8002614 <__malloc_lock>
 8002644:	4a1e      	ldr	r2, [pc, #120]	; (80026c0 <_free_r+0x94>)
 8002646:	6813      	ldr	r3, [r2, #0]
 8002648:	4610      	mov	r0, r2
 800264a:	b933      	cbnz	r3, 800265a <_free_r+0x2e>
 800264c:	6063      	str	r3, [r4, #4]
 800264e:	6014      	str	r4, [r2, #0]
 8002650:	4628      	mov	r0, r5
 8002652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002656:	f7ff bfe3 	b.w	8002620 <__malloc_unlock>
 800265a:	42a3      	cmp	r3, r4
 800265c:	d90a      	bls.n	8002674 <_free_r+0x48>
 800265e:	6821      	ldr	r1, [r4, #0]
 8002660:	1862      	adds	r2, r4, r1
 8002662:	4293      	cmp	r3, r2
 8002664:	bf01      	itttt	eq
 8002666:	681a      	ldreq	r2, [r3, #0]
 8002668:	685b      	ldreq	r3, [r3, #4]
 800266a:	1852      	addeq	r2, r2, r1
 800266c:	6022      	streq	r2, [r4, #0]
 800266e:	6063      	str	r3, [r4, #4]
 8002670:	6004      	str	r4, [r0, #0]
 8002672:	e7ed      	b.n	8002650 <_free_r+0x24>
 8002674:	461a      	mov	r2, r3
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	b10b      	cbz	r3, 800267e <_free_r+0x52>
 800267a:	42a3      	cmp	r3, r4
 800267c:	d9fa      	bls.n	8002674 <_free_r+0x48>
 800267e:	6811      	ldr	r1, [r2, #0]
 8002680:	1850      	adds	r0, r2, r1
 8002682:	42a0      	cmp	r0, r4
 8002684:	d10b      	bne.n	800269e <_free_r+0x72>
 8002686:	6820      	ldr	r0, [r4, #0]
 8002688:	4401      	add	r1, r0
 800268a:	1850      	adds	r0, r2, r1
 800268c:	4283      	cmp	r3, r0
 800268e:	6011      	str	r1, [r2, #0]
 8002690:	d1de      	bne.n	8002650 <_free_r+0x24>
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4401      	add	r1, r0
 8002698:	6011      	str	r1, [r2, #0]
 800269a:	6053      	str	r3, [r2, #4]
 800269c:	e7d8      	b.n	8002650 <_free_r+0x24>
 800269e:	d902      	bls.n	80026a6 <_free_r+0x7a>
 80026a0:	230c      	movs	r3, #12
 80026a2:	602b      	str	r3, [r5, #0]
 80026a4:	e7d4      	b.n	8002650 <_free_r+0x24>
 80026a6:	6820      	ldr	r0, [r4, #0]
 80026a8:	1821      	adds	r1, r4, r0
 80026aa:	428b      	cmp	r3, r1
 80026ac:	bf01      	itttt	eq
 80026ae:	6819      	ldreq	r1, [r3, #0]
 80026b0:	685b      	ldreq	r3, [r3, #4]
 80026b2:	1809      	addeq	r1, r1, r0
 80026b4:	6021      	streq	r1, [r4, #0]
 80026b6:	6063      	str	r3, [r4, #4]
 80026b8:	6054      	str	r4, [r2, #4]
 80026ba:	e7c9      	b.n	8002650 <_free_r+0x24>
 80026bc:	bd38      	pop	{r3, r4, r5, pc}
 80026be:	bf00      	nop
 80026c0:	20000090 	.word	0x20000090

080026c4 <_realloc_r>:
 80026c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c6:	4607      	mov	r7, r0
 80026c8:	4614      	mov	r4, r2
 80026ca:	460e      	mov	r6, r1
 80026cc:	b921      	cbnz	r1, 80026d8 <_realloc_r+0x14>
 80026ce:	4611      	mov	r1, r2
 80026d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80026d4:	f7fe bfac 	b.w	8001630 <_malloc_r>
 80026d8:	b922      	cbnz	r2, 80026e4 <_realloc_r+0x20>
 80026da:	f7ff ffa7 	bl	800262c <_free_r>
 80026de:	4625      	mov	r5, r4
 80026e0:	4628      	mov	r0, r5
 80026e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026e4:	f000 f848 	bl	8002778 <_malloc_usable_size_r>
 80026e8:	42a0      	cmp	r0, r4
 80026ea:	d20f      	bcs.n	800270c <_realloc_r+0x48>
 80026ec:	4621      	mov	r1, r4
 80026ee:	4638      	mov	r0, r7
 80026f0:	f7fe ff9e 	bl	8001630 <_malloc_r>
 80026f4:	4605      	mov	r5, r0
 80026f6:	2800      	cmp	r0, #0
 80026f8:	d0f2      	beq.n	80026e0 <_realloc_r+0x1c>
 80026fa:	4631      	mov	r1, r6
 80026fc:	4622      	mov	r2, r4
 80026fe:	f7ff ff7b 	bl	80025f8 <memcpy>
 8002702:	4631      	mov	r1, r6
 8002704:	4638      	mov	r0, r7
 8002706:	f7ff ff91 	bl	800262c <_free_r>
 800270a:	e7e9      	b.n	80026e0 <_realloc_r+0x1c>
 800270c:	4635      	mov	r5, r6
 800270e:	e7e7      	b.n	80026e0 <_realloc_r+0x1c>

08002710 <_read_r>:
 8002710:	b538      	push	{r3, r4, r5, lr}
 8002712:	4604      	mov	r4, r0
 8002714:	4608      	mov	r0, r1
 8002716:	4611      	mov	r1, r2
 8002718:	2200      	movs	r2, #0
 800271a:	4d05      	ldr	r5, [pc, #20]	; (8002730 <_read_r+0x20>)
 800271c:	602a      	str	r2, [r5, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	f7fd fe83 	bl	800042a <_read>
 8002724:	1c43      	adds	r3, r0, #1
 8002726:	d102      	bne.n	800272e <_read_r+0x1e>
 8002728:	682b      	ldr	r3, [r5, #0]
 800272a:	b103      	cbz	r3, 800272e <_read_r+0x1e>
 800272c:	6023      	str	r3, [r4, #0]
 800272e:	bd38      	pop	{r3, r4, r5, pc}
 8002730:	200000a8 	.word	0x200000a8

08002734 <_fstat_r>:
 8002734:	b538      	push	{r3, r4, r5, lr}
 8002736:	2300      	movs	r3, #0
 8002738:	4d06      	ldr	r5, [pc, #24]	; (8002754 <_fstat_r+0x20>)
 800273a:	4604      	mov	r4, r0
 800273c:	4608      	mov	r0, r1
 800273e:	4611      	mov	r1, r2
 8002740:	602b      	str	r3, [r5, #0]
 8002742:	f7fd feb6 	bl	80004b2 <_fstat>
 8002746:	1c43      	adds	r3, r0, #1
 8002748:	d102      	bne.n	8002750 <_fstat_r+0x1c>
 800274a:	682b      	ldr	r3, [r5, #0]
 800274c:	b103      	cbz	r3, 8002750 <_fstat_r+0x1c>
 800274e:	6023      	str	r3, [r4, #0]
 8002750:	bd38      	pop	{r3, r4, r5, pc}
 8002752:	bf00      	nop
 8002754:	200000a8 	.word	0x200000a8

08002758 <_isatty_r>:
 8002758:	b538      	push	{r3, r4, r5, lr}
 800275a:	2300      	movs	r3, #0
 800275c:	4d05      	ldr	r5, [pc, #20]	; (8002774 <_isatty_r+0x1c>)
 800275e:	4604      	mov	r4, r0
 8002760:	4608      	mov	r0, r1
 8002762:	602b      	str	r3, [r5, #0]
 8002764:	f7fd feb4 	bl	80004d0 <_isatty>
 8002768:	1c43      	adds	r3, r0, #1
 800276a:	d102      	bne.n	8002772 <_isatty_r+0x1a>
 800276c:	682b      	ldr	r3, [r5, #0]
 800276e:	b103      	cbz	r3, 8002772 <_isatty_r+0x1a>
 8002770:	6023      	str	r3, [r4, #0]
 8002772:	bd38      	pop	{r3, r4, r5, pc}
 8002774:	200000a8 	.word	0x200000a8

08002778 <_malloc_usable_size_r>:
 8002778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800277c:	1f18      	subs	r0, r3, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	bfbc      	itt	lt
 8002782:	580b      	ldrlt	r3, [r1, r0]
 8002784:	18c0      	addlt	r0, r0, r3
 8002786:	4770      	bx	lr

08002788 <_init>:
 8002788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800278a:	bf00      	nop
 800278c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800278e:	bc08      	pop	{r3}
 8002790:	469e      	mov	lr, r3
 8002792:	4770      	bx	lr

08002794 <_fini>:
 8002794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002796:	bf00      	nop
 8002798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800279a:	bc08      	pop	{r3}
 800279c:	469e      	mov	lr, r3
 800279e:	4770      	bx	lr
